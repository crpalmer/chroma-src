"use strict";
/**
 * @module RaftStateMachine
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const validation_1 = require("../common/validation");
const invalid_state_params_1 = require("../errors/invalid-state-params");
const dispenser_1 = require("./dispenser");
class ExtrusionAxisState extends dispenser_1.DispenserState {
    constructor(params) {
        if (params.retractDistance !== null) {
            if (params.retractDistance === undefined || !validation_1.validateNumber(params.retractDistance) || params.retractDistance < 0) {
                throw new invalid_state_params_1.default("Invalid retractDistance parameter '" + params.retractDistance + "' supplied to ExtrusionAxisState");
            }
        }
        if (params.unretractExtraLength !== null) {
            if (params.unretractExtraLength === undefined || !validation_1.validateNumber(params.unretractExtraLength) || params.unretractExtraLength < 0) {
                throw new invalid_state_params_1.default("Invalid unretractExtraLength parameter '" + params.unretractExtraLength + "' supplied to ExtrusionAxisState");
            }
        }
        super(params);
        this.retractDistance = params.retractDistance;
        this.unretractExtraLength = params.unretractExtraLength;
    }
    clone() {
        return new ExtrusionAxisState({
            position: this.position,
            coordinateMode: this.coordinateMode,
            totalDispensed: this.totalDispensed,
            retraction: this.retraction,
            retractDistance: this.retractDistance,
            unretractExtraLength: this.unretractExtraLength
        });
    }
    toString() {
        return "ExtrusionAxisState";
    }
}
exports.ExtrusionAxisState = ExtrusionAxisState;
class ExtrusionAxisStateMachine extends dispenser_1.default {
    constructor(initialState) {
        super(initialState);
    }
    insertState(state) {
        super.insertState(state);
    }
    clone() {
        let copy = new ExtrusionAxisStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }
    toString() {
        return "ExtrusionAxisStateMachine";
    }
}
exports.default = ExtrusionAxisStateMachine;
//# sourceMappingURL=extrusion-axis.js.map