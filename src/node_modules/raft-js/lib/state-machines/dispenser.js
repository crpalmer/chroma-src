"use strict";
/**
 * @module RaftStateMachine
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const validation_1 = require("../common/validation");
const util_1 = require("util");
const physical_axis_1 = require("./physical-axis");
const invalid_state_params_1 = require("../errors/invalid-state-params");
class DispenserState extends physical_axis_1.PhysicalAxisState {
    constructor(params) {
        super(params);
        if (util_1.isNullOrUndefined(params.totalDispensed) || !validation_1.validateNumber(params.totalDispensed)) {
            throw new invalid_state_params_1.default("Invalid totalDispensed parameter '" + params.totalDispensed + "' supplied to DispenserState");
        }
        if (util_1.isNullOrUndefined(params.retraction) || !validation_1.validateNumber(params.retraction) || params.retraction < 0) {
            throw new invalid_state_params_1.default("Invalid retraction parameter '" + params.retraction + "' supplied to DispenserState");
        }
        this.totalDispensed = params.totalDispensed;
        this.retraction = params.retraction;
    }
    clone() {
        return new DispenserState({
            position: this.position,
            coordinateMode: this.coordinateMode,
            totalDispensed: this.totalDispensed,
            retraction: this.retraction
        });
    }
    toString() {
        return "DispenserState";
    }
}
exports.DispenserState = DispenserState;
class DispenserStateMachine extends physical_axis_1.default {
    constructor(initialState) {
        super(initialState);
    }
    insertState(state) {
        super.insertState(state);
    }
    clone() {
        let copy = new DispenserStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }
    toString() {
        return "DispenserStateMachine";
    }
}
exports.default = DispenserStateMachine;
//# sourceMappingURL=dispenser.js.map