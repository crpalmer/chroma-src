"use strict";
/**
 * @module RaftStateMachine
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
const validation_1 = require("../common/validation");
const invalid_state_params_1 = require("../errors/invalid-state-params");
class IntegerState extends base_1.RaftState {
    constructor(params) {
        if (params.value !== null) {
            if (params.value === undefined || !validation_1.validateInt(params.value)) {
                throw new invalid_state_params_1.default("Invalid value parameter '" + params.value + "' supplied to IntegerState");
            }
        }
        super(params);
        this.value = params.value;
    }
    clone() {
        return new IntegerState({
            value: this.value
        });
    }
    toString() {
        return "IntegerState";
    }
}
exports.IntegerState = IntegerState;
class IntegerStateMachine extends base_1.default {
    constructor(initialState) {
        super(initialState);
    }
    insertState(state) {
        super.insertState(state);
    }
    clone() {
        let copy = new IntegerStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }
    toString() {
        return "IntegerStateMachine";
    }
}
exports.default = IntegerStateMachine;
//# sourceMappingURL=integer.js.map