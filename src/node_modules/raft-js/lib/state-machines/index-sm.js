"use strict";
/**
 * @module RaftStateMachine
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const integer_1 = require("./integer");
const validation_1 = require("../common/validation");
const invalid_state_params_1 = require("../errors/invalid-state-params");
class IndexState extends integer_1.IntegerState {
    constructor(params) {
        if (params.value !== null) {
            if (params.value === undefined || !validation_1.validateInt(params.value) || params.value < 0) {
                throw new invalid_state_params_1.default("Invalid value parameter '" + params.value + "' supplied to IndexState");
            }
        }
        super(params);
        this.value = params.value;
    }
    clone() {
        return super.clone();
    }
    toString() {
        return "IndexState";
    }
}
exports.IndexState = IndexState;
class IndexStateMachine extends integer_1.default {
    constructor(initialState) {
        super(initialState);
    }
    insertState(state) {
        super.insertState(state);
    }
    clone() {
        let copy = new IndexStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }
    toString() {
        return "IndexStateMachine";
    }
}
exports.default = IndexStateMachine;
//# sourceMappingURL=index-sm.js.map