"use strict";
/**
 * @module RaftStateMachine
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_state_params_1 = require("../errors/invalid-state-params");
const axis_1 = require("./axis");
const enums_1 = require("../enums");
class PhysicalAxisState extends axis_1.AxisState {
    constructor(params) {
        if (!(params.coordinateMode in enums_1.CoordinateModes)) {
            throw new invalid_state_params_1.default("Invalid coordinateMode parameter '" + params.coordinateMode + "' supplied to PhysicalAxisState");
        }
        super(params);
        this.coordinateMode = params.coordinateMode;
    }
    clone() {
        return new PhysicalAxisState({
            position: this.position,
            coordinateMode: this.coordinateMode
        });
    }
    toString() {
        return "PhysicalAxisState";
    }
}
exports.PhysicalAxisState = PhysicalAxisState;
class PhysicalAxisStateMachine extends axis_1.default {
    constructor(initialState) {
        super(initialState);
    }
    insertState(state) {
        super.insertState(state);
    }
    clone() {
        let copy = new PhysicalAxisStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }
    toString() {
        return "PhysicalAxisStateMachine";
    }
}
exports.default = PhysicalAxisStateMachine;
//# sourceMappingURL=physical-axis.js.map