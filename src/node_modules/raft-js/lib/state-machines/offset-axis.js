"use strict";
/**
 * @module RaftStateMachine
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const invalid_state_params_1 = require("../errors/invalid-state-params");
const validation_1 = require("../common/validation");
const physical_axis_1 = require("./physical-axis");
class OffsetAxisState extends physical_axis_1.PhysicalAxisState {
    constructor(params) {
        if (util_1.isNullOrUndefined(params.offset) || !validation_1.validateNumber(params.offset)) {
            throw new invalid_state_params_1.default("Invalid offset parameter '" + params.offset + "' supplied to OffsetAxisState");
        }
        super(params);
        this.offset = params.offset;
    }
    clone() {
        return new OffsetAxisState({
            coordinateMode: this.coordinateMode,
            position: this.position,
            offset: this.offset
        });
    }
    toString() {
        return "OffsetAxisState";
    }
}
exports.OffsetAxisState = OffsetAxisState;
class OffsetAxisStateMachine extends physical_axis_1.default {
    constructor(initialState) {
        super(initialState);
    }
    insertState(state) {
        super.insertState(state);
    }
    clone() {
        let copy = new OffsetAxisStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }
    toString() {
        return "OffsetAxisStateMachine";
    }
}
exports.default = OffsetAxisStateMachine;
//# sourceMappingURL=offset-axis.js.map