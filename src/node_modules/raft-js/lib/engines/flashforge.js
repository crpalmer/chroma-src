"use strict";
/**
 * @module RaftEngine
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const reprap_1 = require("./reprap");
const base_1 = require("./base");
const enable_stepper_motor_1 = require("../instructions/enable-stepper-motor");
const disable_stepper_motor_1 = require("../instructions/disable-stepper-motor");
const set_potentiometer_value_1 = require("../instructions/set-potentiometer-value");
const stabilize_toolhead_temperature_1 = require("../instructions/stabilize-toolhead-temperature");
const stabilize_bed_temperature_1 = require("../instructions/stabilize-bed-temperature");
const toolchange_1 = require("../instructions/toolchange");
const extrusion_axis_1 = require("../state-machines/extrusion-axis");
const set_light_1 = require("../instructions/set-light");
const set_tool_offset_1 = require("../instructions/set-tool-offset");
const load_axis_offset_1 = require("../instructions/load-axis-offset");
const empty_1 = require("../instructions/empty");
const makerbot_1 = require("./makerbot");
class FlashForgeEngine extends reprap_1.default {
    constructor(options) {
        super(options);
        for (let i = 0; i < this.toolheadCount; i++) {
            this.stateMachines["extrusionTool" + i] = new extrusion_axis_1.default(new extrusion_axis_1.ExtrusionAxisState({
                coordinateMode: options.initialExtrusionCoordinateMode,
                position: null,
                totalDispensed: 0,
                retraction: 0,
                retractDistance: null,
                unretractExtraLength: null
            }));
        }
    }
    clone() {
        let copy = new FlashForgeEngine({
            toolheadCount: this.toolheadCount,
            independentExtruders: this.independentExtruders,
            volumetricExtrusion: this.volumetricExtrusion,
            defaultHomeDirectionMax: this.defaultHomeDirectionMax,
            filamentDiameter: this.filamentDiameter,
            initialXYZCoordinateMode: this.stateMachines["x"].getCurrentState().coordinateMode,
            initialExtrusionCoordinateMode: this.stateMachines["extrusion"].getCurrentState().coordinateMode
        });
        this.copyStateMachinesTo(copy);
        return copy;
    }
    toRaftInstruction(line) {
        if (!line.command) {
            return new empty_1.default({
                comment: line.comment
            });
        }
        if (line.command === "G2" || line.command === "G3")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "G10" || line.command === "G11")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "G20" || line.command === "G21")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M0")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M1")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M6")
            return fromM6(line);
        if (line.command === "M7")
            return fromM7(line);
        if (line.command === "M17")
            return fromM17(line);
        if (line.command === "M17")
            return fromM18(line);
        if (line.command === "M24")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M25")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M82")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M83")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M84")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M108")
            return fromM108(line);
        if (line.command === "M132")
            return makerbot_1.fromM132(line);
        if (line.command === "M135")
            return fromM135(line);
        if (line.command === "M146")
            return fromM146(line);
        if (line.command === "M612")
            return fromM612(line);
        if (line.command === "M907")
            return fromM907(line);
        if (line.command[0].toUpperCase() === "T")
            return reprap_1.fromT(line);
        return super.toRaftInstruction(line);
    }
    toOutputInstruction(instruction) {
        if (instruction instanceof stabilize_toolhead_temperature_1.default)
            return fromStabilizeToolheadTemperature(instruction);
        if (instruction instanceof stabilize_bed_temperature_1.default)
            return fromStabilizeBedTemperature(instruction);
        if (instruction instanceof enable_stepper_motor_1.default)
            return fromEnableStepperMotor(instruction);
        if (instruction instanceof disable_stepper_motor_1.default)
            return fromDisableStepperMotor(instruction);
        if (instruction instanceof toolchange_1.default)
            return fromToolChange(instruction);
        if (instruction instanceof load_axis_offset_1.default)
            return makerbot_1.fromLoadAxisOffset(instruction);
        if (instruction instanceof set_light_1.default)
            return fromSetLight(instruction);
        if (instruction instanceof set_tool_offset_1.default)
            return fromSetToolOffset(instruction);
        if (instruction instanceof set_potentiometer_value_1.default)
            return fromSetPotentiometerValue(instruction);
        return super.toOutputInstruction(instruction);
    }
    executeNext(instruction) {
        // if (instruction instanceof LinearMoveInstruction) {
        //
        //     let currentTool = this.stateMachines["toolhead"].getCurrentState.value;
        //     if (!this.stateMachines["extrusionTool" + currentTool].stateInserted && instruction.extrusion !== null) {
        //         let currentEState: ExtrusionAxisState = this.stateMachines["extrusionTool" + currentTool].getCurrentState();
        //         let newEState = getNewExtrusionStateAfterMoveCommand(instruction, currentEState);
        //         this.stateMachines["extrusionTool" + currentTool].insertState(newEState);
        //         this.stateMachines["extrusionTool" + currentTool].stateInserted = true;
        //     }
        //
        // }
        //
        // if (instruction instanceof SetCoordinateModeInstruction) {
        //
        //     if (instruction.extrusion !== CoordinateModes.None) {
        //         for (let i = 0; i < this.toolheadCount; i++) {
        //             if (!this.stateMachines["extrusionTool" + i].stateInserted) {
        //                 let currentEState: ExtrusionAxisState = this.stateMachines["extrusionTool" + i].getCurrentState();
        //                 this.stateMachines["extrusionTool" + i].insertState(new ExtrusionAxisState({
        //                     coordinateMode: instruction.extrusion,
        //                     retractDistance: currentEState.retractDistance,
        //                     unretractExtraLength: currentEState.unretractExtraLength,
        //                     position: currentEState.position,
        //                     totalDispensed: currentEState.totalDispensed,
        //                     retraction: currentEState.retraction,
        //                 }));
        //                 this.stateMachines["extrusionTool" + i].stateInserted = true;
        //             }
        //         }
        //     }
        //
        // }
        //
        // if (instruction instanceof SetPositionInstruction) {
        //
        //     let currentTool = this.stateMachines["toolhead"].getCurrentState.value;
        //     if (!this.stateMachines["extrusionTool" + currentTool].stateInserted && instruction.extrusion !== null) {
        //         let currentEState: ExtrusionAxisState = this.stateMachines["extrusionTool" + currentTool].getCurrentState();
        //         this.stateMachines["extrusionTool" + currentTool].insertState(new ExtrusionAxisState({
        //             coordinateMode: currentEState.coordinateMode,
        //             retractDistance: currentEState.retractDistance,
        //             unretractExtraLength: currentEState.unretractExtraLength,
        //             position: instruction.extrusion,
        //             totalDispensed: currentEState.totalDispensed,
        //             retraction: currentEState.retraction,
        //         }));
        //         this.stateMachines["extrusionTool" + currentTool].stateInserted = true;
        //     }
        //
        // }
        super.executeNext(instruction);
    }
    toString() {
        return "FlashForgeEngine";
    }
}
exports.default = FlashForgeEngine;
/**
 * GCode-to-RaftInstruction translation functions
 */
function fromM6(line) {
    return new stabilize_toolhead_temperature_1.default({
        toolhead: line.t,
        stabilizeTimeout: line.s,
        comment: line.comment
    });
}
function fromM7(line) {
    return new stabilize_bed_temperature_1.default({
        stabilizeTimeout: line.s,
        comment: line.comment
    });
}
function fromM17(line) {
    if (line.x === undefined && line.y === undefined && line.z === undefined
        && line.a === undefined && line.b === undefined && line.e === undefined) {
        return new enable_stepper_motor_1.default({
            comment: line.comment
        });
    }
    return new enable_stepper_motor_1.default({
        x: line.hasOwnProperty("x"),
        y: line.hasOwnProperty("y"),
        z: line.hasOwnProperty("z"),
        a: line.hasOwnProperty("a"),
        b: line.hasOwnProperty("b"),
        e: line.hasOwnProperty("e"),
        comment: line.comment
    });
}
function fromM18(line) {
    if (line.x === undefined && line.y === undefined && line.z === undefined
        && line.a === undefined && line.b === undefined && line.e === undefined) {
        return new disable_stepper_motor_1.default({
            comment: line.comment
        });
    }
    return new disable_stepper_motor_1.default({
        x: line.hasOwnProperty("x"),
        y: line.hasOwnProperty("y"),
        z: line.hasOwnProperty("z"),
        a: line.hasOwnProperty("a"),
        b: line.hasOwnProperty("b"),
        e: line.hasOwnProperty("e"),
        comment: line.comment
    });
}
function fromM108(line) {
    return new toolchange_1.default({
        toolhead: line.t,
        comment: line.comment
    });
}
function fromM135(line) {
    return new set_tool_offset_1.default({
        toolhead: line.t,
        comment: line.comment
    });
}
function fromM146(line) {
    return new set_light_1.default({
        r: line.r,
        g: line.g,
        b: line.b,
        comment: line.comment
    });
}
function fromM612(line) {
    return new set_tool_offset_1.default({
        toolhead: null,
        x: line.x,
        y: line.y,
        comment: line.comment
    });
}
function fromM907(line) {
    return new set_potentiometer_value_1.default({
        x: line.x,
        y: line.y,
        z: line.z,
        a: line.a,
        b: line.b,
        comment: line.comment
    });
}
/**
 * RaftInstruction-to-GCode translation functions
 */
function fromStabilizeToolheadTemperature(instruction) {
    return {
        command: "M6",
        t: instruction.toolhead === null ? undefined : instruction.toolhead,
        s: instruction.stabilizeTimeout === null ? undefined : instruction.stabilizeTimeout,
        comment: instruction.comment
    };
}
function fromStabilizeBedTemperature(instruction) {
    return {
        command: "M7",
        s: instruction.stabilizeTimeout === null ? undefined : instruction.stabilizeTimeout,
        comment: instruction.comment
    };
}
function fromEnableStepperMotor(instruction) {
    if (instruction.x && instruction.y && instruction.z && instruction.a && instruction.b && instruction.e) {
        return {
            command: "M17",
            comment: instruction.comment
        };
    }
    return {
        command: "M17",
        x: instruction.x ? null : undefined,
        y: instruction.y ? null : undefined,
        z: instruction.z ? null : undefined,
        a: instruction.a ? null : undefined,
        b: instruction.b ? null : undefined,
        e: instruction.e ? null : undefined,
        comment: instruction.comment
    };
}
function fromDisableStepperMotor(instruction) {
    if (instruction.x && instruction.y && instruction.z && instruction.a && instruction.b && instruction.e) {
        return {
            command: "M18",
            comment: instruction.comment
        };
    }
    return {
        command: "M18",
        x: instruction.x ? null : undefined,
        y: instruction.y ? null : undefined,
        z: instruction.z ? null : undefined,
        a: instruction.a ? null : undefined,
        b: instruction.b ? null : undefined,
        e: instruction.e ? null : undefined,
        comment: instruction.comment
    };
}
function fromToolChange(instruction) {
    return {
        command: "M108",
        t: instruction.toolhead,
        comment: instruction.comment
    };
}
function fromSetLight(instruction) {
    return {
        command: "M146",
        r: instruction.r,
        g: instruction.g,
        b: instruction.b,
        comment: instruction.comment
    };
}
function fromSetToolOffset(instruction) {
    if (instruction.toolhead === null) {
        return {
            command: "M612",
            x: instruction.x,
            y: instruction.y,
            comment: instruction.comment
        };
    }
    return {
        command: "M135",
        t: instruction.toolhead,
        comment: instruction.comment
    };
}
function fromSetPotentiometerValue(instruction) {
    return {
        command: "M907",
        x: instruction.x,
        y: instruction.y,
        z: instruction.z,
        a: instruction.a,
        b: instruction.b,
        comment: instruction.comment
    };
}
//# sourceMappingURL=flashforge.js.map