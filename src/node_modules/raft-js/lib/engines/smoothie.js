"use strict";
/**
 * @module RaftEngine
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const reprap_1 = require("./reprap");
const set_fan_1 = require("../instructions/set-fan");
const enable_stepper_motor_1 = require("../instructions/enable-stepper-motor");
const disable_stepper_motor_1 = require("../instructions/disable-stepper-motor");
const set_retract_length_1 = require("../instructions/set-retract-length");
const base_1 = require("./base");
const empty_1 = require("../instructions/empty");
class SmoothieEngine extends reprap_1.default {
    constructor(options) {
        super(options);
    }
    clone() {
        let copy = new SmoothieEngine({
            toolheadCount: this.toolheadCount,
            independentExtruders: this.independentExtruders,
            volumetricExtrusion: this.volumetricExtrusion,
            defaultHomeDirectionMax: this.defaultHomeDirectionMax,
            filamentDiameter: this.filamentDiameter,
            initialXYZCoordinateMode: this.stateMachines["x"].getCurrentState().coordinateMode,
            initialExtrusionCoordinateMode: this.stateMachines["extrusion"].getCurrentState().coordinateMode
        });
        this.copyStateMachinesTo(copy);
        return copy;
    }
    toRaftInstruction(line) {
        if (!line.command) {
            return new empty_1.default({
                comment: line.comment
            });
        }
        if (line.command === "M0")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M1")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M17")
            return fromM17(line);
        if (line.command === "M18" || line.command === "M84")
            return fromM18M84(line);
        if (line.command === "M106")
            return fromM106(line);
        if (line.command === "M116")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M117")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M135")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M144")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M201")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M207")
            return fromM207(line);
        if (line.command === "M208")
            return fromM208(line);
        if (line.command === "M226")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M300")
            return base_1.unknownInstruction(line, this.config);
        return super.toRaftInstruction(line);
    }
    toOutputInstruction(instruction) {
        if (instruction instanceof enable_stepper_motor_1.default)
            return fromEnableStepperMotor(instruction);
        if (instruction instanceof disable_stepper_motor_1.default)
            return fromDisableStepperMotor(instruction);
        if (instruction instanceof set_fan_1.default)
            return fromSetFan(instruction);
        if (instruction instanceof set_retract_length_1.default)
            return fromSetRetractLength(instruction);
        return super.toOutputInstruction(instruction);
    }
    toString() {
        return "SmoothieEngine";
    }
}
exports.default = SmoothieEngine;
/**
 * GCode-to-RaftInstruction translation functions
 */
function fromM17(line) {
    return new enable_stepper_motor_1.default({
        comment: line.comment
    });
}
function fromM18M84(line) {
    if (line.command === "M84"
        || (line.x === undefined && line.y === undefined && line.z === undefined
            && line.a === undefined && line.b === undefined && line.e === undefined)) {
        return new disable_stepper_motor_1.default({
            comment: line.comment
        });
    }
    return new disable_stepper_motor_1.default({
        x: line.hasOwnProperty("x"),
        y: line.hasOwnProperty("y"),
        z: line.hasOwnProperty("z"),
        a: line.hasOwnProperty("a"),
        b: line.hasOwnProperty("b"),
        e: line.hasOwnProperty("e"),
        comment: line.comment
    });
}
function fromM106(line) {
    return new set_fan_1.default({
        isToggle: true,
        value: true,
        comment: line.comment
    });
}
function fromM207(line) {
    return new set_retract_length_1.default({
        retractLength: line.s,
        retractFeedrate: line.f,
        zLift: line.z,
        comment: line.comment
    });
}
function fromM208(line) {
    return new set_retract_length_1.default({
        unretractLengthOffset: line.s,
        unretractFeedrate: line.f,
        comment: line.comment
    });
}
/**
 * RaftInstruction-to-GCode translation functions
 */
function fromEnableStepperMotor(instruction) {
    return {
        command: "M17",
        comment: instruction.comment
    };
}
function fromDisableStepperMotor(instruction) {
    if (instruction.x === null && instruction.y === null && instruction.z === null
        && instruction.a === null && instruction.b === null && instruction.e === null) {
        return {
            command: "M84",
            comment: instruction.comment
        };
    }
    if (instruction.x === true && instruction.y === true && instruction.z === true
        && instruction.a === true && instruction.b === true && instruction.e === true) {
        return {
            command: "M84",
            comment: instruction.comment
        };
    }
    return {
        command: "M18",
        x: (instruction.x === null || instruction.x === true) ? undefined : 0,
        y: (instruction.y === null || instruction.y === true) ? undefined : 0,
        z: (instruction.z === null || instruction.z === true) ? undefined : 0,
        a: (instruction.a === null || instruction.a === true) ? undefined : 0,
        b: (instruction.b === null || instruction.b === true) ? undefined : 0,
        e: (instruction.e === null || instruction.e === true) ? undefined : 0,
        comment: instruction.comment
    };
}
function fromSetFan(instruction) {
    if (instruction.value) {
        return {
            command: "M106",
            comment: instruction.comment
        };
    }
    else {
        return {
            command: "M107",
            comment: instruction.comment
        };
    }
}
function fromSetRetractLength(instruction) {
    if (instruction.retractLength === null) {
        return {
            command: "M208",
            s: instruction.unretractLengthOffset,
            f: instruction.unretractFeedrate,
            comment: instruction.comment
        };
    }
    else {
        return {
            command: "M207",
            s: instruction.retractLength,
            f: instruction.retractFeedrate,
            z: instruction.zLift,
            comment: instruction.comment
        };
    }
}
//# sourceMappingURL=smoothie.js.map