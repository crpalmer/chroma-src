"use strict";
/**
 * @module RaftEngine
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const reprap_1 = require("./reprap");
const set_bed_temperature_1 = require("../instructions/set-bed-temperature");
const toolchange_1 = require("../instructions/toolchange");
const set_build_progress_1 = require("../instructions/set-build-progress");
const home_1 = require("../instructions/home");
const set_fan_1 = require("../instructions/set-fan");
const stabilize_toolhead_temperature_1 = require("../instructions/stabilize-toolhead-temperature");
const play_song_1 = require("../instructions/play-song");
const set_potentiometer_value_1 = require("../instructions/set-potentiometer-value");
const display_message_1 = require("../instructions/display-message");
const program_end_1 = require("../instructions/program-end");
const load_axis_offset_1 = require("../instructions/load-axis-offset");
const stabilize_bed_temperature_1 = require("../instructions/stabilize-bed-temperature");
const base_1 = require("./base");
const set_position_1 = require("../instructions/set-position");
const empty_1 = require("../instructions/empty");
class MakerbotEngine extends reprap_1.default {
    constructor(options) {
        super(options);
    }
    clone() {
        let copy = new MakerbotEngine({
            toolheadCount: this.toolheadCount,
            independentExtruders: this.independentExtruders,
            volumetricExtrusion: this.volumetricExtrusion,
            defaultHomeDirectionMax: this.defaultHomeDirectionMax,
            filamentDiameter: this.filamentDiameter,
            initialXYZCoordinateMode: this.stateMachines["x"].getCurrentState().coordinateMode,
            initialExtrusionCoordinateMode: this.stateMachines["extrusion"].getCurrentState().coordinateMode
        });
        this.copyStateMachinesTo(copy);
        return copy;
    }
    toRaftInstruction(line) {
        if (!line.command) {
            return new empty_1.default({
                comment: line.comment
            });
        }
        if (line.command === "G92")
            return fromG92(line);
        if (line.command === "G130")
            return fromG130(line);
        if (line.command === "G161" || line.command === "G162")
            return fromG161G162(line);
        if (line.command === "M2")
            return fromM2(line);
        if (line.command === "M70")
            return fromM70(line);
        if (line.command === "M72")
            return fromM72(line);
        if (line.command === "M73")
            return fromM73(line);
        if (line.command === "M109")
            return fromM109(line);
        if (line.command === "M117")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M126")
            return fromM126(line);
        if (line.command === "M127")
            return fromM127(line);
        if (line.command === "M132")
            return fromM132(line);
        if (line.command === "M133")
            return fromM133(line);
        if (line.command === "M134")
            return fromM134(line);
        if (line.command === "M135")
            return fromM135(line);
        if (line.command && line.command[0].toUpperCase() === "T")
            return base_1.unknownInstruction(line, this.config);
        return super.toRaftInstruction(line);
    }
    toOutputInstruction(instruction) {
        if (instruction instanceof set_position_1.default)
            return fromSetPosition(instruction);
        if (instruction instanceof set_potentiometer_value_1.default)
            return fromSetPotentiometerValue(instruction);
        if (instruction instanceof home_1.default)
            return fromHome(instruction);
        if (instruction instanceof program_end_1.default)
            return fromProgramEnd(instruction);
        if (instruction instanceof display_message_1.default)
            return fromDisplayMessage(instruction);
        if (instruction instanceof play_song_1.default)
            return fromPlaySong(instruction);
        if (instruction instanceof set_build_progress_1.default)
            return fromSetBuildProgress(instruction);
        if (instruction instanceof set_bed_temperature_1.default)
            return fromSetBedTemperature(instruction);
        if (instruction instanceof set_fan_1.default)
            return fromSetFan(instruction);
        if (instruction instanceof load_axis_offset_1.default)
            return fromLoadAxisOffset(instruction);
        if (instruction instanceof stabilize_toolhead_temperature_1.default)
            return fromStabilizeToolheadTemperature(instruction);
        if (instruction instanceof stabilize_bed_temperature_1.default)
            return fromStabilizeBedTemperature(instruction);
        if (instruction instanceof toolchange_1.default)
            return fromToolChange(instruction);
        return super.toOutputInstruction(instruction);
    }
    toString() {
        return "MakerbotEngine";
    }
}
exports.default = MakerbotEngine;
/**
 * GCode-to-RaftInstruction translation functions
 */
function fromG92(line) {
    if (line.x === undefined && line.y === undefined && line.z === undefined && line.a === undefined && line.e === undefined) {
        return new set_position_1.default({
            x: 0,
            y: 0,
            z: 0,
            extrusion: 0,
            comment: line.comment
        });
    }
    return new set_position_1.default({
        x: line.x,
        y: line.y,
        z: line.z,
        extrusion: (line.a === undefined ? line.e : line.a),
        comment: line.comment
    });
}
function fromG130(line) {
    return new set_potentiometer_value_1.default({
        x: line.x,
        y: line.y,
        z: line.z,
        a: line.a,
        b: line.b,
        comment: line.comment
    });
}
function fromG161G162(line) {
    return new home_1.default({
        x: line.hasOwnProperty("x"),
        y: line.hasOwnProperty("y"),
        z: line.hasOwnProperty("z"),
        toMaximum: (line.command === "G162"),
        feedrate: line.f,
        comment: line.comment
    });
}
function fromM2(line) {
    return new program_end_1.default({
        comment: line.comment
    });
}
function fromM70(line) {
    return new display_message_1.default({
        message: line.message,
        duration: line.p
    });
}
function fromM72(line) {
    return new play_song_1.default({
        id: line.p,
        comment: line.comment
    });
}
function fromM73(line) {
    return new set_build_progress_1.default({
        percentage: line.p,
        comment: line.comment
    });
}
function fromM109(line) {
    return new set_bed_temperature_1.default({
        temperature: line.s,
        bedNumber: line.t,
        comment: line.comment
    });
}
function fromM126(line) {
    return new set_fan_1.default({
        isToggle: line.s === undefined,
        fanNumber: line.t,
        value: (line.s === undefined ? true : line.s),
        comment: line.comment
    });
}
function fromM127(line) {
    return new set_fan_1.default({
        isToggle: true,
        fanNumber: line.t,
        value: false,
        comment: line.comment
    });
}
function fromM132(line) {
    return new load_axis_offset_1.default({
        x: line.hasOwnProperty("x"),
        y: line.hasOwnProperty("y"),
        z: line.hasOwnProperty("z"),
        a: line.hasOwnProperty("a"),
        b: line.hasOwnProperty("b"),
        comment: line.comment
    });
}
exports.fromM132 = fromM132;
function fromM133(line) {
    return new stabilize_toolhead_temperature_1.default({
        toolhead: line.t,
        stabilizeTimeout: line.p,
        comment: line.comment
    });
}
function fromM134(line) {
    return new stabilize_bed_temperature_1.default({
        bedNumber: line.t,
        stabilizeTimeout: line.p,
        comment: line.comment
    });
}
function fromM135(line) {
    return new toolchange_1.default({
        toolhead: line.t,
        comment: line.comment
    });
}
/**
 * RaftInstruction-to-GCode translation functions
 */
function fromSetPosition(instruction) {
    if (instruction.x === null && instruction.y === null && instruction.z === null && instruction.extrusion === null) {
        return {
            command: "G92",
            comment: instruction.comment
        };
    }
    return {
        command: "G92",
        x: (instruction.x === null ? undefined : instruction.x),
        y: (instruction.y === null ? undefined : instruction.y),
        z: (instruction.z === null ? undefined : instruction.z),
        a: (instruction.extrusion === null ? undefined : instruction.extrusion),
        comment: instruction.comment
    };
}
function fromSetPotentiometerValue(instruction) {
    return {
        command: "G130",
        x: (instruction.x === null ? undefined : instruction.x),
        y: (instruction.y === null ? undefined : instruction.y),
        z: (instruction.z === null ? undefined : instruction.z),
        a: (instruction.a === null ? undefined : instruction.a),
        b: (instruction.b === null ? undefined : instruction.b),
        comment: instruction.comment
    };
}
function fromHome(instruction) {
    return {
        command: (instruction.toMaximum ? "G162" : "G161"),
        x: (instruction.x === false ? undefined : null),
        y: (instruction.y === false ? undefined : null),
        z: (instruction.z === false ? undefined : null),
        f: (instruction.feedrate === null ? undefined : instruction.feedrate),
        comment: instruction.comment
    };
}
function fromProgramEnd(instruction) {
    return {
        command: "M2",
        comment: instruction.comment
    };
}
function fromDisplayMessage(instruction) {
    return {
        command: "M70",
        p: instruction.duration,
        message: instruction.message,
        comment: instruction.comment
    };
}
function fromPlaySong(instruction) {
    return {
        command: "M72",
        p: instruction.id,
        comment: instruction.comment
    };
}
function fromSetBuildProgress(instruction) {
    return {
        command: "M73",
        p: instruction.percentage,
        comment: instruction.comment
    };
}
function fromSetBedTemperature(instruction) {
    if (instruction.stabilize) {
        return {
            command: "M109",
            s: instruction.temperature,
            t: (instruction.bedNumber === null ? undefined : instruction.bedNumber),
            comment: instruction.comment
        };
    }
    return {
        command: "M140",
        s: instruction.temperature,
        t: (instruction.bedNumber === null ? undefined : instruction.bedNumber),
        comment: instruction.comment
    };
}
function fromSetFan(instruction) {
    if (instruction.value === 0) {
        return {
            command: "M127",
            t: (instruction.fanNumber === null ? undefined : instruction.fanNumber),
            comment: instruction.comment
        };
    }
    else {
        return {
            command: "M126",
            t: (instruction.fanNumber === null ? undefined : instruction.fanNumber),
            s: (instruction.isToggle ? undefined : instruction.value),
            comment: instruction.comment
        };
    }
}
function fromLoadAxisOffset(instruction) {
    return {
        command: "M132",
        x: instruction.x ? null : undefined,
        y: instruction.y ? null : undefined,
        z: instruction.z ? null : undefined,
        a: instruction.a ? null : undefined,
        b: instruction.b ? null : undefined,
        comment: instruction.comment
    };
}
exports.fromLoadAxisOffset = fromLoadAxisOffset;
function fromStabilizeToolheadTemperature(instruction) {
    return {
        command: "M133",
        t: instruction.toolhead,
        p: (instruction.stabilizeTimeout === null ? undefined : instruction.stabilizeTimeout),
        comment: instruction.comment
    };
}
function fromStabilizeBedTemperature(instruction) {
    return {
        command: "M134",
        t: instruction.bedNumber,
        p: (instruction.stabilizeTimeout === null ? undefined : instruction.stabilizeTimeout),
        comment: instruction.comment
    };
}
function fromToolChange(instruction) {
    return {
        command: "M135",
        t: instruction.toolhead,
        comment: instruction.comment
    };
}
//# sourceMappingURL=makerbot.js.map