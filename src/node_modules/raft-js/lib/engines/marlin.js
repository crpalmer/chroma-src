"use strict";
/**
 * @module RaftEngine
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const smoothie_1 = require("./smoothie");
const set_fan_1 = require("../instructions/set-fan");
const base_1 = require("./base");
const sleep_1 = require("../instructions/sleep");
const reprap_1 = require("./reprap");
const pause_and_move_1 = require("../instructions/pause-and-move");
const set_light_1 = require("../instructions/set-light");
const set_max_print_acceleration_1 = require("../instructions/set-max-print-acceleration");
const emergency_stop_1 = require("../instructions/emergency-stop");
const empty_1 = require("../instructions/empty");
class MarlinEngine extends smoothie_1.default {
    constructor(options) {
        super(options);
    }
    clone() {
        let copy = new MarlinEngine({
            toolheadCount: this.toolheadCount,
            independentExtruders: this.independentExtruders,
            volumetricExtrusion: this.volumetricExtrusion,
            defaultHomeDirectionMax: this.defaultHomeDirectionMax,
            filamentDiameter: this.filamentDiameter,
            initialXYZCoordinateMode: this.stateMachines["x"].getCurrentState().coordinateMode,
            initialExtrusionCoordinateMode: this.stateMachines["extrusion"].getCurrentState().coordinateMode
        });
        this.copyStateMachinesTo(copy);
        return copy;
    }
    toRaftInstruction(line) {
        if (!line.command) {
            return new empty_1.default({
                comment: line.comment
            });
        }
        if (line.command === "G28")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M0" || line.command === "M1")
            return fromM0M1(line);
        if (line.command === "M106")
            return fromM106(line);
        if (line.command === "M116")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M117")
            return reprap_1.fromM117(line);
        if (line.command === "M125")
            return fromM125(line);
        if (line.command === "M150")
            return fromM150(line);
        if (line.command === "M201")
            return fromM201(line);
        if (line.command === "M203")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M300")
            return reprap_1.fromM300(line);
        if (line.command === "M410")
            return fromM410(line);
        if (line.command === "M564")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M566")
            return base_1.unknownInstruction(line, this.config);
        return super.toRaftInstruction(line);
    }
    toOutputInstruction(instruction) {
        if (instruction instanceof sleep_1.default)
            return fromSleep(instruction);
        if (instruction instanceof set_fan_1.default)
            return fromSetFan(instruction);
        if (instruction instanceof pause_and_move_1.default)
            return fromPauseAndMove(instruction);
        if (instruction instanceof set_light_1.default)
            return fromSetLight(instruction);
        if (instruction instanceof emergency_stop_1.default)
            return fromEmergencyStop(instruction);
        return super.toOutputInstruction(instruction);
    }
    toString() {
        return "MarlinEngine";
    }
}
exports.default = MarlinEngine;
/**
 * GCode-to-RaftInstruction translation functions
 */
function fromM0M1(line) {
    return new sleep_1.default({
        timeoutSeconds: line.s,
        timeoutMilliseconds: line.p,
        comment: line.comment
    });
}
function fromM106(line) {
    if (line.s === undefined) {
        return new set_fan_1.default({
            isToggle: true,
            value: true,
            fanNumber: line.p,
            comment: line.comment
        });
    }
    return new set_fan_1.default({
        isToggle: false,
        fanNumber: line.p,
        value: line.s,
        comment: line.comment
    });
}
function fromM125(line) {
    return new pause_and_move_1.default({
        retraction: line.l,
        x: line.x,
        y: line.y,
        z: line.z,
        comment: line.comment
    });
}
function fromM150(line) {
    return new set_light_1.default({
        r: line.r,
        g: line.u,
        b: line.b,
        comment: line.comment
    });
}
function fromM201(line) {
    return new set_max_print_acceleration_1.default({
        extrusion: line.e,
        x: line.x,
        y: line.y,
        z: line.z,
        comment: line.comment
    });
}
function fromM410(line) {
    return new emergency_stop_1.default({
        comment: line.comment
    });
}
/**
 * RaftInstruction-to-GCode translation functions
 */
function fromSleep(instruction) {
    return {
        command: "M0",
        s: (instruction.timeoutSeconds === null ? undefined : instruction.timeoutSeconds),
        p: (instruction.timeoutMilliseconds === null ? undefined : instruction.timeoutMilliseconds),
        comment: instruction.comment
    };
}
function fromSetFan(instruction) {
    if (instruction.isToggle) {
        if (instruction.value) {
            return {
                command: "M106",
                p: (instruction.fanNumber === null ? undefined : instruction.fanNumber),
                comment: instruction.comment
            };
        }
        else {
            return {
                command: "M107",
                p: (instruction.fanNumber === null ? undefined : instruction.fanNumber),
                comment: instruction.comment
            };
        }
    }
    return {
        command: "M106",
        s: (instruction.value === null ? undefined : instruction.value),
        p: (instruction.fanNumber === null ? undefined : instruction.fanNumber),
        comment: instruction.comment
    };
}
function fromPauseAndMove(instruction) {
    return {
        command: "M125",
        l: (instruction.retraction === null ? undefined : instruction.retraction),
        x: (instruction.x === null ? undefined : instruction.x),
        y: (instruction.y === null ? undefined : instruction.y),
        z: (instruction.z === null ? undefined : instruction.z),
        comment: instruction.comment
    };
}
function fromSetLight(instruction) {
    return {
        command: "M150",
        r: (instruction.r === null ? undefined : instruction.r),
        u: (instruction.g === null ? undefined : instruction.g),
        b: (instruction.b === null ? undefined : instruction.b),
        comment: instruction.comment
    };
}
function fromEmergencyStop(instruction) {
    return {
        command: "M410",
        comment: instruction.comment
    };
}
//# sourceMappingURL=marlin.js.map