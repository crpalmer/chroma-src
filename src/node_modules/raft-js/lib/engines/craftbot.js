"use strict";
/**
 * @module RaftEngine
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
const reprap_1 = require("./reprap");
const linear_move_1 = require("../instructions/linear-move");
const pause_and_move_1 = require("../instructions/pause-and-move");
const offset_axis_1 = require("../state-machines/offset-axis");
const empty_1 = require("../instructions/empty");
class CraftbotEngine extends reprap_1.default {
    constructor(options) {
        super(options);
    }
    clone() {
        let copy = new CraftbotEngine({
            toolheadCount: this.toolheadCount,
            independentExtruders: this.independentExtruders,
            volumetricExtrusion: this.volumetricExtrusion,
            defaultHomeDirectionMax: this.defaultHomeDirectionMax,
            filamentDiameter: this.filamentDiameter,
            initialXYZCoordinateMode: this.stateMachines["x"].getCurrentState().coordinateMode,
            initialExtrusionCoordinateMode: this.stateMachines["extrusion"].getCurrentState().coordinateMode
        });
        this.copyStateMachinesTo(copy);
        return copy;
    }
    toRaftInstruction(line) {
        if (!line.command) {
            return new empty_1.default({
                comment: line.comment
            });
        }
        if (line.command === "G2" || line.command === "G3")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "G10" || line.command === "G11")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "G101")
            return fromG101(line);
        if (line.command === "G197")
            return fromG197(line);
        if (line.command === "M0" || line.command === "M1")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M120")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M121")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M135")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M144")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M190")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M201")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M203")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M206")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M207")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M208")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M220")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M221")
            return base_1.unknownInstruction(line, this.config);
        if (line.command === "M226")
            return base_1.unknownInstruction(line, this.config);
        return super.toRaftInstruction(line);
    }
    toOutputInstruction(instruction) {
        if ((instruction instanceof linear_move_1.default)
            && instruction.relativeX && instruction.relativeY && instruction.relativeZ) {
            return fromRelativeLinearMove(instruction);
        }
        if (instruction instanceof pause_and_move_1.default) {
            return fromPauseAndMove(instruction);
        }
        return super.toOutputInstruction(instruction);
    }
    executeNext(instruction) {
        if (instruction instanceof pause_and_move_1.default) {
            if (!this.stateMachines["x"].stateInserted && instruction.x !== null) {
                let currentXState = this.stateMachines["x"].getCurrentState();
                this.stateMachines["x"].insertState(new offset_axis_1.OffsetAxisState({
                    coordinateMode: currentXState.coordinateMode,
                    offset: currentXState.offset,
                    position: instruction.x
                }));
                this.stateMachines["x"].stateInserted = true;
            }
            if (!this.stateMachines["y"].stateInserted && instruction.y !== null) {
                let currentYState = this.stateMachines["y"].getCurrentState();
                this.stateMachines["y"].insertState(new offset_axis_1.OffsetAxisState({
                    coordinateMode: currentYState.coordinateMode,
                    offset: currentYState.offset,
                    position: instruction.y
                }));
                this.stateMachines["y"].stateInserted = true;
            }
            if (!this.stateMachines["z"].stateInserted && instruction.z !== null) {
                let currentZState = this.stateMachines["z"].getCurrentState();
                this.stateMachines["z"].insertState(new offset_axis_1.OffsetAxisState({
                    coordinateMode: currentZState.coordinateMode,
                    offset: currentZState.offset,
                    position: instruction.z
                }));
                this.stateMachines["z"].stateInserted = true;
            }
        }
        super.executeNext(instruction);
    }
    toString() {
        return "CraftbotEngine";
    }
}
exports.default = CraftbotEngine;
/**
 * GCode-to-RaftInstruction translation functions
 */
function fromG101(line) {
    return new linear_move_1.default({
        x: line.x,
        y: line.y,
        z: line.z,
        extrusion: line.e,
        feedrate: line.f,
        relativeX: true,
        relativeY: true,
        relativeZ: true,
        relativeExtrusion: true,
        comment: line.comment
    });
}
function fromG197(line) {
    return new pause_and_move_1.default({
        x: 0,
        y: 100,
        comment: line.comment
    });
}
/**
 * RaftInstruction-to-GCode translation functions
 */
function fromRelativeLinearMove(instruction) {
    return {
        command: "G101",
        x: (instruction.x === null ? undefined : instruction.x),
        y: (instruction.y === null ? undefined : instruction.y),
        z: (instruction.z === null ? undefined : instruction.z),
        e: (instruction.extrusion === null ? undefined : instruction.extrusion),
        f: (instruction.feedrate === null ? undefined : instruction.feedrate),
        comment: instruction.comment
    };
}
function fromPauseAndMove(instruction) {
    return {
        command: "G197",
        comment: instruction.comment
    };
}
//# sourceMappingURL=craftbot.js.map