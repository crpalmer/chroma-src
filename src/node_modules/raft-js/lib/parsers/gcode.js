"use strict";
/**
 * @module RaftParser
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const ascii_1 = require("./ascii");
const invalid_argument_1 = require("../errors/invalid-argument");
const invalid_instruction_1 = require("../errors/invalid-instruction");
const instruction_syntax_1 = require("../errors/instruction-syntax");
class GCodeParser extends ascii_1.default {
    constructor(engine) {
        super(engine);
    }
    clone() {
        return new GCodeParser(this.engine.clone());
    }
    parse(input) {
        let lines = input.toString().split(/\r\n|\r|\n/);
        let instructions = [];
        for (let i = 0; i < lines.length; i++) {
            let line = lines[i];
            // collect line parameters
            let params = {
                original: line,
                command: "",
                comment: ""
            };
            // store comments (starting with a semicolon, continuing to the end of the line)
            let comment = "";
            let commentSplit = line.split(";");
            line = commentSplit.shift().trim();
            if (commentSplit.length > 0) {
                comment += commentSplit.join(";");
            }
            // also store comments starting with a bracket, continuing to the rest of the line
            commentSplit = line.split("(");
            line = commentSplit.shift().trim();
            if (commentSplit.length > 0) {
                comment += "(" + commentSplit.join("(");
            }
            params.comment = comment;
            // split the line at spaces
            let lineParts = line.split(/ +/);
            if (lineParts.length > 0) {
                let command = lineParts.shift();
                if (command) {
                    params.command = command;
                }
                if (command.toUpperCase() === "M117") {
                    params.message = lineParts.join(" ");
                }
                else if (command.toUpperCase() === "M70") {
                    if (lineParts[0][0].toUpperCase() === "P") {
                        params.p = parseFloat(lineParts.shift().substr(1));
                    }
                    params.message = lineParts.join(" ");
                }
                else {
                    for (let part of lineParts) {
                        let key = part[0].toLowerCase();
                        let valString = part.substr(1).trim();
                        if (valString === "") {
                            params[key] = "";
                        }
                        else if (valString.match(/^[-+]?(?:\d+|(?:\d*\.\d+))$/)) {
                            params[key] = parseFloat(valString);
                        }
                        else {
                            params[key] = valString;
                        }
                    }
                }
            }
            try {
                instructions.push(this.engine.toRaftInstruction(params));
            }
            catch (e) {
                if ((e instanceof invalid_argument_1.default) || (e instanceof invalid_instruction_1.default)) {
                    let lineNum = i + 1;
                    throw new instruction_syntax_1.default(e.message, lineNum);
                }
                else {
                    throw e;
                }
            }
        }
        return instructions;
    }
    toOutput(instructions) {
        let output = [];
        for (let instruction of instructions) {
            let params = this.engine.toOutputInstruction(instruction);
            let line = "";
            let comment = "";
            if (params.comment) {
                comment = ";" + params.comment;
            }
            delete params.comment;
            if (params.command) {
                let command = params.command;
                line += command + " ";
                if (command === "M117") {
                    line += " " + params.message;
                    delete params.message;
                }
                else if (command === "M70") {
                    line += " P" + params.p + " " + params.message;
                    delete params.p;
                    delete params.message;
                }
            }
            else if (params.original) {
                line += params.original;
                delete params.original;
            }
            delete params.command;
            for (let param in params) {
                let val = params[param];
                if (val !== undefined) {
                    if (val === null) {
                        val = "";
                    }
                    line += param.toUpperCase() + val + " ";
                }
            }
            if (comment !== "") {
                line += comment;
            }
            output.push(line.trim());
        }
        return output.join("\n");
    }
    toString() {
        return "GCodeParser";
    }
}
exports.default = GCodeParser;
//# sourceMappingURL=gcode.js.map