"use strict";
/**
 * @module RaftParser
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const gcode_1 = require("./gcode");
const fs = require("fs");
const file_type_1 = require("../errors/file-type");
class BinaryGCodeParser extends gcode_1.default {
    constructor(engine) {
        super(engine);
    }
    readFile(inpath) {
        if (!fs.existsSync(inpath)) {
            throw new file_type_1.default("Input file path does not exist.");
        }
        let buf = fs.readFileSync(inpath);
        let input = buf.toString("ascii", 0x38B0);
        this.binaryHeader = buf.slice(0, 0x38B0);
        return input;
    }
    writeFile(outpath, contents) {
        fs.writeFileSync(outpath, this.binaryHeader, {
            encoding: "binary"
        });
        fs.appendFileSync(outpath, contents, {
            encoding: "binary"
        });
    }
    toString() {
        return "BinaryGCodeParser";
    }
}
exports.default = BinaryGCodeParser;
//# sourceMappingURL=binary-gcode.js.map