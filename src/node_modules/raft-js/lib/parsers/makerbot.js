"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** */
const Zip = require("node-zip");
const fs = require("fs");
const json_1 = require("./json");
const file_type_1 = require("../errors/file-type");
class MakerbotParser extends json_1.default {
    constructor(engine) {
        super(engine);
    }
    clone() {
        return new MakerbotParser(this.engine.clone());
    }
    parse(input) {
        let lines = JSON.parse(input.toString());
        let instructions = [];
        for (let line of lines) {
            instructions.push(this.engine.toRaftInstruction(line));
        }
        return instructions;
    }
    toOutput(instructions) {
        let output = [];
        for (let instruction of instructions) {
            let line = this.engine.toOutputInstruction(instruction);
            if (line !== null) {
                output.push(line);
            }
        }
        return (JSON.stringify(output, null, 0)
            .replace(/"command":/g, "\n\"command\" :"))
            .replace(/"function":/g, "\"function\" :")
            .replace(/:/g, ": ")
            .replace(/,/g, ", ");
    }
    readFile(inpath) {
        if (!fs.existsSync(inpath)) {
            throw new file_type_1.default("Input file path does not exist.");
        }
        let contents = fs.readFileSync(inpath);
        let zip = new Zip(contents);
        this.metaJson = JSON.parse(Buffer.from(zip.files["meta.json"]._data.getContent()).toString("utf-8"));
        this.thumbnailSmall = Buffer.from(zip.files["thumbnail_55x40.png"]._data.getContent());
        this.thumbnailMedium = Buffer.from(zip.files["thumbnail_110x80.png"]._data.getContent());
        this.thumbnailLarge = Buffer.from(zip.files["thumbnail_320x200.png"]._data.getContent());
        let printFile = Buffer.from(zip.files["print.jsontoolpath"]._data.getContent());
        return printFile.toString("utf-8");
    }
    writeFile(outpath, contents) {
        let zip = new Zip();
        zip.file("meta.json", JSON.stringify(this.metaJson, null, 4));
        zip.file("thumbnail_55x40.png", this.thumbnailSmall);
        zip.file("thumbnail_110x80.png", this.thumbnailMedium);
        zip.file("thumbnail_320x200.png", this.thumbnailLarge);
        zip.file("print.jsontoolpath", contents);
        let data = zip.generate({
            base64: false,
            compression: "DEFLATE"
        });
        fs.writeFileSync(outpath, data, "binary");
    }
    toString() {
        return "MakerbotParser";
    }
}
exports.default = MakerbotParser;
//# sourceMappingURL=makerbot.js.map