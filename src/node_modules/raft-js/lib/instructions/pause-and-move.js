"use strict";
/**
 * @module RaftInstruction
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const pause_1 = require("./pause");
const validation_1 = require("../common/validation");
const invalid_argument_1 = require("../errors/invalid-argument");
/**
 * GCode-Initiated Pause with Move
 * <p>Initiate a pause in the same way as if pressing the
 * pause button on the machine. Move to a wait position.</p>
 */
class PauseAndMoveInstruction extends pause_1.default {
    constructor(params) {
        if (params.retraction !== undefined && (!validation_1.validateNumber(params.retraction) || params.retraction < 0)) {
            throw new invalid_argument_1.default("Invalid retraction value '" + params.retraction + "' supplied as argument");
        }
        if (params.x !== undefined && !validation_1.validateNumber(params.x)) {
            throw new invalid_argument_1.default("Invalid X value '" + params.x + "' supplied as argument");
        }
        if (params.y !== undefined && !validation_1.validateNumber(params.y)) {
            throw new invalid_argument_1.default("Invalid Y value '" + params.y + "' supplied as argument");
        }
        if (params.z !== undefined && !validation_1.validateNumber(params.z)) {
            throw new invalid_argument_1.default("Invalid Z value '" + params.z + "' supplied as argument");
        }
        super(params);
        this.retraction = (params.retraction === undefined ? null : params.retraction);
        this.x = (params.x === undefined ? null : params.x);
        this.y = (params.y === undefined ? null : params.y);
        this.z = (params.z === undefined ? null : params.z);
    }
    toString() {
        return "PauseAndMoveInstruction";
    }
}
exports.default = PauseAndMoveInstruction;
//# sourceMappingURL=pause-and-move.js.map