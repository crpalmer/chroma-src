"use strict";
/**
 * @module RaftInstruction
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const validation_1 = require("../common/validation");
const invalid_argument_1 = require("../errors/invalid-argument");
const base_1 = require("./base");
class SetRetractLengthInstruction extends base_1.default {
    constructor(params) {
        if (params.unretractLengthOffset !== undefined && (!validation_1.validateNumber(params.retractLength) || params.retractLength < 0)) {
            throw new invalid_argument_1.default("Invalid retractLength '" + params.retractLength + "' supplied as argument");
        }
        if (params.unretractLengthOffset !== undefined && (!validation_1.validateNumber(params.retractFeedrate) || params.retractFeedrate <= 0)) {
            throw new invalid_argument_1.default("Invalid retractFeedrate '" + params.retractFeedrate + "' supplied as argument");
        }
        if (params.unretractLengthOffset !== undefined && !validation_1.validateNumber(params.unretractLengthOffset)) {
            throw new invalid_argument_1.default("Invalid unretractLengthOffset '" + params.unretractLengthOffset + "' supplied as argument");
        }
        if (params.unretractFeedrate !== undefined && (!validation_1.validateNumber(params.unretractFeedrate) || params.unretractFeedrate <= 0)) {
            throw new invalid_argument_1.default("Invalid unretractFeedrate '" + params.unretractFeedrate + "' supplied as argument");
        }
        if (params.zLift !== undefined && (!validation_1.validateNumber(params.zLift) || params.zLift < 0)) {
            throw new invalid_argument_1.default("Invalid zLift '" + params.zLift + "' supplied as argument");
        }
        super(params);
        this.retractLength = (params.retractLength === undefined ? null : params.retractLength);
        this.retractFeedrate = (params.retractFeedrate === undefined ? null : params.retractFeedrate);
        this.unretractLengthOffset = (params.unretractLengthOffset === undefined ? null : params.unretractLengthOffset);
        this.unretractFeedrate = (params.unretractFeedrate === undefined ? null : params.unretractFeedrate);
        this.zLift = (params.zLift === undefined ? null : params.zLift);
    }
    toString() {
        return "SetRetractLengthInstruction";
    }
}
exports.default = SetRetractLengthInstruction;
//# sourceMappingURL=set-retract-length.js.map