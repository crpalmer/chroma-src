"use strict";
/**
 * @module RaftInstruction
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const invalid_argument_1 = require("../errors/invalid-argument");
const oem_1 = require("./oem");
const validation_1 = require("../common/validation");
class OAlgorithmDataInstruction extends oem_1.default {
    constructor(params) {
        if (!validation_1.validateNumber(params.ingoing) || params.ingoing < 0) {
            throw new invalid_argument_1.default("Invalid ingoing drive '" + params.ingoing + "' supplied as argument");
        }
        if (!validation_1.validateNumber(params.outgoing) || params.outgoing < 0) {
            throw new invalid_argument_1.default("Invalid outgoing drive '" + params.outgoing + "' supplied as argument");
        }
        if (!validation_1.validateNumber(params.heat)) {
            throw new invalid_argument_1.default("Invalid heat factor '" + params.heat + "' supplied as argument");
        }
        if (!validation_1.validateNumber(params.compression)) {
            throw new invalid_argument_1.default("Invalid compression factor '" + params.compression + "' supplied as argument");
        }
        if (!validation_1.validateNumber(params.cooling)) {
            throw new invalid_argument_1.default("Invalid cooling factor '" + params.compression + "' supplied as argument");
        }
        super(params);
        this.ingoing = params.ingoing;
        this.outgoing = params.outgoing;
        this.heat = params.heat;
        this.compression = params.compression;
        this.cooling = params.cooling;
    }
    toString() {
        return "OAlgorithmDataInstruction";
    }
}
exports.default = OAlgorithmDataInstruction;
//# sourceMappingURL=o-algorithm-data.js.map