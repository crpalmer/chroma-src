"use strict";
/**
 * @module RaftInstruction
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
const validation_1 = require("../common/validation");
const invalid_argument_1 = require("../errors/invalid-argument");
/**
 * Sleep (Conditional Stop)
 * <p>Finish any moves left in the buffer and shut down.
 * The first G or M command sent will wake the printer up.</p>
 */
class SleepInstruction extends base_1.default {
    constructor(params) {
        if (params.timeoutSeconds !== undefined && (!validation_1.validateNumber(params.timeoutSeconds) || params.timeoutSeconds < 0)) {
            throw new invalid_argument_1.default("Invalid timeout (seconds) '" + params.timeoutSeconds + "' supplied as argument");
        }
        if (params.timeoutMilliseconds !== undefined && (!validation_1.validateNumber(params.timeoutMilliseconds) || params.timeoutMilliseconds < 0)) {
            throw new invalid_argument_1.default("Invalid timeout (milliseconds) '" + params.timeoutMilliseconds + "' supplied as argument");
        }
        super(params);
        this.timeoutSeconds = (params.timeoutSeconds === undefined ? null : params.timeoutSeconds);
        this.timeoutMilliseconds = (params.timeoutMilliseconds === undefined ? null : params.timeoutMilliseconds);
    }
    toString() {
        return "SleepInstruction";
    }
}
exports.default = SleepInstruction;
//# sourceMappingURL=sleep.js.map