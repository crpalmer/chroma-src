"use strict";
/**
 * @module RaftInstruction
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const validation_1 = require("../common/validation");
const invalid_argument_1 = require("../errors/invalid-argument");
const move_1 = require("./move");
/**
 * Linear Move
 * <p>Move in a straight line from (current X, current Y, current Z) to a point (X, Y, Z),
 * where X/Y/Z are either explicitly specified or inferred from current X/Y/Z.</p>
 */
class LinearMoveInstruction extends move_1.default {
    constructor(params) {
        if (params.x !== undefined && !validation_1.validateNumber(params.x)) {
            throw new invalid_argument_1.default("Invalid X value '" + params.x + "' supplied as argument");
        }
        if (params.y !== undefined && !validation_1.validateNumber(params.y)) {
            throw new invalid_argument_1.default("Invalid Y value '" + params.y + "' supplied as argument");
        }
        if (params.z !== undefined && !validation_1.validateNumber(params.z)) {
            throw new invalid_argument_1.default("Invalid Z value '" + params.z + "' supplied as argument");
        }
        super(params);
        this.x = (params.x === undefined ? null : params.x);
        this.y = (params.y === undefined ? null : params.y);
        this.z = (params.z === undefined ? null : params.z);
        this.relativeX = !!params.relativeX;
        this.relativeY = !!params.relativeY;
        this.relativeZ = !!params.relativeZ;
        this.relativeExtrusion = !!params.relativeExtrusion;
        this.isRapidMove = !!params.isRapidMove;
    }
    toString() {
        return "LinearMoveInstruction";
    }
}
exports.default = LinearMoveInstruction;
//# sourceMappingURL=linear-move.js.map