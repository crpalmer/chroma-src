"use strict";
/**
 * @module RaftInstruction
 */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
const validation_1 = require("../common/validation");
const invalid_argument_1 = require("../errors/invalid-argument");
const sleep_1 = require("./sleep");
/**
 * Unconditional Stop
 * <p>Finish any moves left in the buffer and shut down.</p>
 */
class StopInstruction extends sleep_1.default {
    constructor(params) {
        if (params.delay !== undefined && (!validation_1.validateInt(params.delay) || params.delay < 0)) {
            throw new invalid_argument_1.default("Invalid delay '" + params.delay + "' supplied as argument");
        }
        super(params);
        this.delay = (params.delay === undefined ? null : params.delay);
        this.useMilliseconds = (params.useMilliseconds === undefined ? true : !!params.useMilliseconds);
        this.keepHeatersActive = (params.keepHeatersActive === undefined ? null : !!params.keepHeatersActive);
    }
    toString() {
        return "StopInstruction";
    }
}
exports.default = StopInstruction;
//# sourceMappingURL=stop.js.map