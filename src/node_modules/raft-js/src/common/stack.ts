
export default class Stack<T> {

    private items: T[];

    constructor() {
        this.items = [];
    }

    push(value: T): void {
        this.items.push(value);
    }

    pop(): T {
        return this.items.pop();
    }

    peek(): T {
        if (this.items.length > 0) {
            return this.items[this.items.length - 1];
        }
        return undefined;
    }

    /**
     *
     * @returns {int}
     */
    count(): number {
        return this.items.length;
    }

    isEmpty(): boolean {
        return (this.items.length === 0);
    }

    clear(): void {
        if (this.items.length > 0) {
            this.items = [];
        }
    }

    shallowCopy(): Stack<T> {
        let copy = new Stack<T>();
        copy.items = this.items.slice();
        return copy;
    }

    deepCopy(): Stack<T> {
        let copy = new Stack<T>();
        for (let item of this.items) {
            copy.push(item);
        }
        return copy;
    }

}