/**
 * @module RaftInstruction
 */ /** */

import InvalidArgumentError from "../errors/invalid-argument";
import RaftInstruction, {RaftInstructionParams} from "./base";
import {validateNumber} from "../common/validation";

export interface SetPotentiometerValueInstructionParams extends RaftInstructionParams {
    x?: number,
    y?: number,
    z?: number,
    a?: number,
    b?: number
}

export default class SetPotentiometerValueInstruction extends RaftInstruction {

    readonly x: number;
    readonly y: number;
    readonly z: number;
    readonly a: number;
    readonly b: number;

    constructor (params: SetPotentiometerValueInstructionParams) {
        if (params.x !== undefined && !validateNumber(params.x)) {
            throw new InvalidArgumentError("Invalid x value '" + params.x + "' supplied as argument");
        }
        if (params.y !== undefined && !validateNumber(params.y)) {
            throw new InvalidArgumentError("Invalid y value '" + params.y + "' supplied as argument");
        }
        if (params.z !== undefined && !validateNumber(params.z)) {
            throw new InvalidArgumentError("Invalid z value '" + params.z + "' supplied as argument");
        }
        if (params.a !== undefined && !validateNumber(params.a)) {
            throw new InvalidArgumentError("Invalid a value '" + params.a + "' supplied as argument");
        }
        if (params.b !== undefined && !validateNumber(params.b)) {
            throw new InvalidArgumentError("Invalid b value '" + params.b + "' supplied as argument");
        }
        super(params);
        this.x = (params.x === undefined ? null : params.x);
        this.y = (params.y === undefined ? null : params.y);
        this.z = (params.z === undefined ? null : params.z);
        this.a = (params.a === undefined ? null : params.a);
        this.b = (params.b === undefined ? null : params.b);
    }

    toString(): string {
        return "SetPotentiometerValueInstruction";
    }

}
