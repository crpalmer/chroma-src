/**
 * @module RaftInstruction
 */ /** */

import {validateNumber} from "../common/validation";
import InvalidArgumentError from "../errors/invalid-argument";
import MoveInstruction, {MoveInstructionParams} from "./move";

export interface ArcMoveInstructionParams extends MoveInstructionParams {
    clockwise: boolean,
    x: number,
    y: number,
    i: number,
    j: number
}

/**
 * Controlled Arc Move
 * <p>Move in an arc (clockwise or counter-clockwise) from (current X, current Y) to a point (X, Y),
 * with a center point at (current X + I, current Y + J).</p>
 */
export default class ArcMoveInstruction extends MoveInstruction {

    readonly clockwise: boolean;
    readonly x: number;
    readonly y: number;
    readonly i: number;
    readonly j: number;

    constructor (params: ArcMoveInstructionParams) {
        if (params.clockwise === undefined) {
            throw new InvalidArgumentError("Clockwise flag missing from constructor");
        }
        if (!validateNumber(params.x)) {
            throw new InvalidArgumentError("Invalid X value '" + params.x + "' supplied as argument");
        }
        if (!validateNumber(params.y)) {
            throw new InvalidArgumentError("Invalid Y value '" + params.y + "' supplied as argument");
        }
        if (!validateNumber(params.i)) {
            throw new InvalidArgumentError("Invalid I value '" + params.i + "' supplied as argument");
        }
        if (!validateNumber(params.j)) {
            throw new InvalidArgumentError("Invalid J value '" + params.j + "' supplied as argument");
        }
        super(params);
        this.clockwise = !!params.clockwise;
        this.x = params.x;
        this.y = params.y;
        this.i = params.i;
        this.j = params.j;
    }

    toString(): string {
        return "ArcMoveInstruction";
    }

}
