/**
 * @module RaftInstruction
 */ /** */

import InvalidArgumentError from "../errors/invalid-argument";
import RaftInstruction, {RaftInstructionParams} from "./base";
import {validateNumber} from "../common/validation";

export interface SetMaxAccelerationInstructionParams extends RaftInstructionParams {
    x?: number,
    y?: number,
    z?: number,
    extrusion?: number
}

export default class SetMaxAccelerationInstruction extends RaftInstruction {

    readonly x: number;
    readonly y: number;
    readonly z: number;
    readonly extrusion: number;

    constructor (params: SetMaxAccelerationInstructionParams) {
        if (params.x !== undefined && (!validateNumber(params.x) || params.x <= 0)) {
            throw new InvalidArgumentError("Invalid x value '" + params.x + "' supplied as argument");
        }
        if (params.y !== undefined && (!validateNumber(params.y) || params.y <= 0)) {
            throw new InvalidArgumentError("Invalid y value '" + params.y + "' supplied as argument");
        }
        if (params.z !== undefined && (!validateNumber(params.z) || params.z <= 0)) {
            throw new InvalidArgumentError("Invalid z value '" + params.z + "' supplied as argument");
        }
        if (params.extrusion !== undefined && (!validateNumber(params.extrusion) || params.extrusion <= 0)) {
            throw new InvalidArgumentError("Invalid extrusion value '" + params.extrusion + "' supplied as argument");
        }
        super(params);
        this.x = (params.x === undefined ? null : params.x);
        this.y = (params.y === undefined ? null : params.y);
        this.z = (params.z === undefined ? null : params.z);
        this.extrusion = (params.extrusion === undefined ? null : params.extrusion);
    }

    toString(): string {
        return "SetMaxAccelerationInstruction";
    }

}
