/**
 * @module RaftInstruction
 */ /** */

import {validateInt} from "../common/validation";
import InvalidArgumentError from "../errors/invalid-argument";
import SleepInstruction, {SleepInstructionParams} from "./sleep";

export interface StopInstructionParams extends SleepInstructionParams {
    delay?: number,
    useMilliseconds?: boolean,
    keepHeatersActive?: boolean
}

/**
 * Unconditional Stop
 * <p>Finish any moves left in the buffer and shut down.</p>
 */
export default class StopInstruction extends SleepInstruction {

    readonly delay: number;
    readonly useMilliseconds: boolean;
    readonly keepHeatersActive: boolean;

    constructor (params: StopInstructionParams) {
        if (params.delay !== undefined && (!validateInt(params.delay) || params.delay < 0)) {
            throw new InvalidArgumentError("Invalid delay '" + params.delay + "' supplied as argument");
        }
        super(params);
        this.delay = (params.delay === undefined ? null : params.delay);
        this.useMilliseconds = (params.useMilliseconds === undefined ? true : !!params.useMilliseconds);
        this.keepHeatersActive = (params.keepHeatersActive === undefined ? null : !!params.keepHeatersActive);
    }

    toString(): string {
        return "StopInstruction";
    }

}
