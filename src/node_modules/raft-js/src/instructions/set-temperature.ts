/**
 * @module RaftInstruction
 */ /** */

import InvalidArgumentError from "../errors/invalid-argument";
import RaftInstruction, {RaftInstructionParams} from "./base";
import {validateNumber} from "../common/validation";

export interface SetTemperatureInstructionParams extends RaftInstructionParams {
    temperature: number,
    maxTargetTemperature?: number,
    stabilize?: boolean,
    stabilizeTimeout?: number
}

export default class SetTemperatureInstruction extends RaftInstruction {

    readonly temperature: number;
    readonly maxTargetTemperature: number;
    readonly stabilize: boolean;
    readonly stabilizeTimeout: number;

    constructor (params: SetTemperatureInstructionParams) {
        if (params.temperature === undefined && params.maxTargetTemperature === undefined) {
            throw new InvalidArgumentError("Temperature argument missing from instruction");
        }
        if (params.temperature !== null && params.temperature !== undefined && (!validateNumber(params.temperature) || params.temperature < 0)) {
            throw new InvalidArgumentError("Invalid temperature '" + params.temperature + "' supplied as argument");
        }
        if (params.maxTargetTemperature !== undefined && (!validateNumber(params.maxTargetTemperature) || params.maxTargetTemperature < 0)) {
            throw new InvalidArgumentError("Invalid target temperature '" + params.maxTargetTemperature + "' supplied as argument");
        }
        if (params.stabilizeTimeout !== undefined && (!validateNumber(params.stabilizeTimeout) || params.stabilizeTimeout < 0)) {
            throw new InvalidArgumentError("Invalid stabilize timeout '" + params.stabilizeTimeout + "' supplied as argument");
        }
        super(params);
        this.temperature = (params.temperature === undefined ? null : params.temperature);
        this.maxTargetTemperature = (params.maxTargetTemperature === undefined ? null : params.maxTargetTemperature);
        this.stabilize = (params.stabilize === undefined ? true : !!params.stabilize);
        if (this.stabilize) {
            this.stabilizeTimeout = (params.stabilizeTimeout === undefined ? null : params.stabilizeTimeout);
        } else {
            this.stabilizeTimeout = null;
        }
    }

    toString(): string {
        return "SetTemperatureInstruction";
    }

}
