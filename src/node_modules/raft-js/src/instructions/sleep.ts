/**
 * @module RaftInstruction
 */ /** */

import RaftInstruction, {RaftInstructionParams} from "./base";
import {validateNumber} from "../common/validation";
import InvalidArgumentError from "../errors/invalid-argument";

export interface SleepInstructionParams extends RaftInstructionParams {
    timeoutSeconds?: number
    timeoutMilliseconds?: number
}

/**
 * Sleep (Conditional Stop)
 * <p>Finish any moves left in the buffer and shut down.
 * The first G or M command sent will wake the printer up.</p>
 */
export default class SleepInstruction extends RaftInstruction {

    readonly timeoutSeconds: number;
    readonly timeoutMilliseconds: number;

    constructor (params: SleepInstructionParams) {
        if (params.timeoutSeconds !== undefined && (!validateNumber(params.timeoutSeconds) || params.timeoutSeconds < 0)) {
            throw new InvalidArgumentError("Invalid timeout (seconds) '" + params.timeoutSeconds + "' supplied as argument");
        }
        if (params.timeoutMilliseconds !== undefined && (!validateNumber(params.timeoutMilliseconds) || params.timeoutMilliseconds < 0)) {
            throw new InvalidArgumentError("Invalid timeout (milliseconds) '" + params.timeoutMilliseconds + "' supplied as argument");
        }
        super(params);
        this.timeoutSeconds = (params.timeoutSeconds === undefined ? null : params.timeoutSeconds);
        this.timeoutMilliseconds = (params.timeoutMilliseconds === undefined ? null : params.timeoutMilliseconds);
    }

    toString(): string {
        return "SleepInstruction";
    }

}
