/**
 * @module RaftInstruction
 */ /** */

import {validateNumber} from "../common/validation";
import InvalidArgumentError from "../errors/invalid-argument";
import MoveInstruction, {MoveInstructionParams} from "./move";
import {CoordinateModes} from "../enums";

export interface LinearMoveInstructionParams extends MoveInstructionParams {
    x?: number,
    y?: number,
    z?: number,
    relativeX?: boolean,
    relativeY?: boolean,
    relativeZ?: boolean,
    relativeExtrusion?: boolean,
    isRapidMove?: boolean
}

/**
 * Linear Move
 * <p>Move in a straight line from (current X, current Y, current Z) to a point (X, Y, Z),
 * where X/Y/Z are either explicitly specified or inferred from current X/Y/Z.</p>
 */
export default class LinearMoveInstruction extends MoveInstruction {

    readonly x: number;
    readonly y: number;
    readonly z: number;
    readonly relativeX: boolean;
    readonly relativeY: boolean;
    readonly relativeZ: boolean;
    readonly relativeExtrusion: boolean;
    readonly isRapidMove: boolean;

    constructor (params: LinearMoveInstructionParams) {
        if (params.x !== undefined && !validateNumber(params.x)) {
            throw new InvalidArgumentError("Invalid X value '" + params.x + "' supplied as argument");
        }
        if (params.y !== undefined && !validateNumber(params.y)) {
            throw new InvalidArgumentError("Invalid Y value '" + params.y + "' supplied as argument");
        }
        if (params.z !== undefined && !validateNumber(params.z)) {
            throw new InvalidArgumentError("Invalid Z value '" + params.z + "' supplied as argument");
        }
        super(params);
        this.x = (params.x === undefined ? null : params.x);
        this.y = (params.y === undefined ? null : params.y);
        this.z = (params.z === undefined ? null : params.z);
        this.relativeX = !!params.relativeX;
        this.relativeY = !!params.relativeY;
        this.relativeZ = !!params.relativeZ;
        this.relativeExtrusion = !!params.relativeExtrusion;
        this.isRapidMove = !!params.isRapidMove;
    }

    toString(): string {
        return "LinearMoveInstruction";
    }

}
