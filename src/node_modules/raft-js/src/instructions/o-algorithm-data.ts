/**
 * @module RaftInstruction
 */ /** */

import InvalidArgumentError from "../errors/invalid-argument";
import OEMInstruction, {OEMInstructionParams} from "./oem";
import {validateNumber} from "../common/validation";

export interface OAlgorithmDataInstructionParams extends OEMInstructionParams {
    ingoing: number
    outgoing: number
    heat: number
    compression: number
    cooling: number
}

export default class OAlgorithmDataInstruction extends OEMInstruction {

    readonly ingoing: number;
    readonly outgoing: number;
    readonly heat: number;
    readonly compression: number;
    readonly cooling: number;

    constructor (params: OAlgorithmDataInstructionParams) {
        if (!validateNumber(params.ingoing) || params.ingoing < 0) {
            throw new InvalidArgumentError("Invalid ingoing drive '" + params.ingoing + "' supplied as argument");
        }
        if (!validateNumber(params.outgoing) || params.outgoing < 0) {
            throw new InvalidArgumentError("Invalid outgoing drive '" + params.outgoing + "' supplied as argument");
        }
        if (!validateNumber(params.heat)) {
            throw new InvalidArgumentError("Invalid heat factor '" + params.heat + "' supplied as argument");
        }
        if (!validateNumber(params.compression)) {
            throw new InvalidArgumentError("Invalid compression factor '" + params.compression + "' supplied as argument");
        }
        if (!validateNumber(params.cooling)) {
            throw new InvalidArgumentError("Invalid cooling factor '" + params.compression + "' supplied as argument");
        }
        super(params);
        this.ingoing = params.ingoing;
        this.outgoing = params.outgoing;
        this.heat = params.heat;
        this.compression = params.compression;
        this.cooling = params.cooling;
    }

    toString(): string {
        return "OAlgorithmDataInstruction";
    }

}
