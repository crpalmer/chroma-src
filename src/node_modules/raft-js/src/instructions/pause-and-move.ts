/**
 * @module RaftInstruction
 */ /** */

import PauseInstruction, {PauseInstructionParams} from "./pause";
import {validateNumber} from "../common/validation";
import InvalidArgumentError from "../errors/invalid-argument";

export interface PauseAndMoveInstructionParams extends PauseInstructionParams {
    retraction?: number
    x?: number
    y?: number
    z?: number
}

/**
 * GCode-Initiated Pause with Move
 * <p>Initiate a pause in the same way as if pressing the
 * pause button on the machine. Move to a wait position.</p>
 */
export default class PauseAndMoveInstruction extends PauseInstruction {

    readonly retraction: number;
    readonly x: number;
    readonly y: number;
    readonly z: number;

    constructor (params: PauseAndMoveInstructionParams) {
        if (params.retraction !== undefined && (!validateNumber(params.retraction) || params.retraction < 0)) {
            throw new InvalidArgumentError("Invalid retraction value '" + params.retraction + "' supplied as argument");
        }
        if (params.x !== undefined && !validateNumber(params.x)) {
            throw new InvalidArgumentError("Invalid X value '" + params.x + "' supplied as argument");
        }
        if (params.y !== undefined && !validateNumber(params.y)) {
            throw new InvalidArgumentError("Invalid Y value '" + params.y + "' supplied as argument");
        }
        if (params.z !== undefined && !validateNumber(params.z)) {
            throw new InvalidArgumentError("Invalid Z value '" + params.z + "' supplied as argument");
        }
        super(params);
        this.retraction = (params.retraction === undefined ? null : params.retraction);
        this.x = (params.x === undefined ? null : params.x);
        this.y = (params.y === undefined ? null : params.y);
        this.z = (params.z === undefined ? null : params.z);
    }

    toString(): string {
        return "PauseAndMoveInstruction";
    }

}
