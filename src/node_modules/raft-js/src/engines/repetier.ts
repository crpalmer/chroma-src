/**
 * @module RaftEngine
 */ /** */

import SmoothieEngine, {SmoothieEngineOptions} from "./smoothie";
import {GCodeLine} from "../parsers/gcode";
import RaftInstruction from "../instructions/base";
import {unknownInstruction} from "./base";
import {fromM116} from "./reprap";
import ToggleLightInstruction from "../instructions/toggle-light";
import EmptyInstruction from "../instructions/empty";

export interface RepetierEngineOptions extends SmoothieEngineOptions {
}

export default class RepetierEngine extends SmoothieEngine {

    public constructor(options: RepetierEngineOptions) {
        super(options);
    }

    public clone(): RepetierEngine {
        let copy = new RepetierEngine({
            toolheadCount: this.toolheadCount,
            independentExtruders: this.independentExtruders,
            volumetricExtrusion: this.volumetricExtrusion,
            defaultHomeDirectionMax: this.defaultHomeDirectionMax,
            filamentDiameter: this.filamentDiameter,
            initialXYZCoordinateMode: this.stateMachines["x"].getCurrentState().coordinateMode,
            initialExtrusionCoordinateMode: this.stateMachines["extrusion"].getCurrentState().coordinateMode
        });
        this.copyStateMachinesTo(copy);
        return copy;
    }

    public toRaftInstruction(line: GCodeLine): RaftInstruction {

        if (!line.command) {
            return new EmptyInstruction({
                comment: line.comment
            });
        }

        if (line.command === "G2" || line.command === "G3") return unknownInstruction(line, this.config);
        if (line.command === "M116") return fromM116(line);
        if (line.command === "M355") return fromM355(line);

        return super.toRaftInstruction(line);
    }

    public toOutputInstruction(instruction: RaftInstruction): GCodeLine {

        if (instruction instanceof ToggleLightInstruction) return fromToggleLight(instruction);

        return super.toOutputInstruction(instruction);
    }

    public toString(): string {
        return "RepetierEngine";
    }

}

/**
 * GCode-to-RaftInstruction translation functions
 */

function fromM355(line: GCodeLine): ToggleLightInstruction {
    return new ToggleLightInstruction({
        on: line.s === 1,
        comment: line.comment
    });
}

/**
 * RaftInstruction-to-GCode translation functions
 */

function fromToggleLight(instruction: ToggleLightInstruction): GCodeLine {
    return {
        command: "M355",
        s: (instruction.on ? 1 : 0),
        comment: instruction.comment
    }
}
