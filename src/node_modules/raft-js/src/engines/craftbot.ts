/**
 * @module RaftEngine
 */ /** */

import {unknownInstruction} from "./base";
import RepRapEngine, {RepRapEngineOptions} from "./reprap";
import {GCodeLine} from "../parsers/gcode";
import RaftInstruction from "../instructions/base";
import LinearMoveInstruction from "../instructions/linear-move";
import {CoordinateModes} from "../enums";
import PauseAndMoveInstruction from "../instructions/pause-and-move";
import {OffsetAxisState} from "../state-machines/offset-axis";
import EmptyInstruction from "../instructions/empty";

export interface CraftbotEngineOptions extends RepRapEngineOptions {
}

export default class CraftbotEngine extends RepRapEngine {

    public constructor(options: CraftbotEngineOptions) {
        super(options);
    }

    public clone(): CraftbotEngine {
        let copy = new CraftbotEngine({
            toolheadCount: this.toolheadCount,
            independentExtruders: this.independentExtruders,
            volumetricExtrusion: this.volumetricExtrusion,
            defaultHomeDirectionMax: this.defaultHomeDirectionMax,
            filamentDiameter: this.filamentDiameter,
            initialXYZCoordinateMode: this.stateMachines["x"].getCurrentState().coordinateMode,
            initialExtrusionCoordinateMode: this.stateMachines["extrusion"].getCurrentState().coordinateMode
        });
        this.copyStateMachinesTo(copy);
        return copy;
    }

    public toRaftInstruction(line: GCodeLine): RaftInstruction {

        if (!line.command) {
            return new EmptyInstruction({
                comment: line.comment
            });
        }

        if (line.command === "G2" || line.command === "G3") return unknownInstruction(line, this.config);
        if (line.command === "G10" || line.command === "G11") return unknownInstruction(line, this.config);
        if (line.command === "G101") return fromG101(line);
        if (line.command === "G197") return fromG197(line);

        if (line.command === "M0" || line.command === "M1") return unknownInstruction(line, this.config);
        if (line.command === "M120") return unknownInstruction(line, this.config);
        if (line.command === "M121") return unknownInstruction(line, this.config);
        if (line.command === "M135") return unknownInstruction(line, this.config);
        if (line.command === "M144") return unknownInstruction(line, this.config);
        if (line.command === "M190") return unknownInstruction(line, this.config);
        if (line.command === "M201") return unknownInstruction(line, this.config);
        if (line.command === "M203") return unknownInstruction(line, this.config);
        if (line.command === "M206") return unknownInstruction(line, this.config);
        if (line.command === "M207") return unknownInstruction(line, this.config);
        if (line.command === "M208") return unknownInstruction(line, this.config);
        if (line.command === "M220") return unknownInstruction(line, this.config);
        if (line.command === "M221") return unknownInstruction(line, this.config);
        if (line.command === "M226") return unknownInstruction(line, this.config);

        return super.toRaftInstruction(line);
    }

    public toOutputInstruction(instruction: RaftInstruction): GCodeLine {

        if ((instruction instanceof LinearMoveInstruction)
            && instruction.relativeX && instruction.relativeY && instruction.relativeZ) {
            return fromRelativeLinearMove(instruction);
        }
        if (instruction instanceof PauseAndMoveInstruction) {
            return fromPauseAndMove(instruction);
        }

        return super.toOutputInstruction(instruction);
    }

    public executeNext(instruction: RaftInstruction): void {

        if (instruction instanceof PauseAndMoveInstruction) {

            if (!this.stateMachines["x"].stateInserted && instruction.x !== null) {
                let currentXState: OffsetAxisState = this.stateMachines["x"].getCurrentState();
                this.stateMachines["x"].insertState(new OffsetAxisState({
                    coordinateMode: currentXState.coordinateMode,
                    offset: currentXState.offset,
                    position: instruction.x
                }));
                this.stateMachines["x"].stateInserted = true;
            }

            if (!this.stateMachines["y"].stateInserted && instruction.y !== null) {
                let currentYState: OffsetAxisState = this.stateMachines["y"].getCurrentState();
                this.stateMachines["y"].insertState(new OffsetAxisState({
                    coordinateMode: currentYState.coordinateMode,
                    offset: currentYState.offset,
                    position: instruction.y
                }));
                this.stateMachines["y"].stateInserted = true;
            }

            if (!this.stateMachines["z"].stateInserted && instruction.z !== null) {
                let currentZState: OffsetAxisState = this.stateMachines["z"].getCurrentState();
                this.stateMachines["z"].insertState(new OffsetAxisState({
                    coordinateMode: currentZState.coordinateMode,
                    offset: currentZState.offset,
                    position: instruction.z
                }));
                this.stateMachines["z"].stateInserted = true;
            }

        }

        super.executeNext(instruction);

    }

    public toString(): string {
        return "CraftbotEngine";
    }

}

/**
 * GCode-to-RaftInstruction translation functions
 */

function fromG101(line: GCodeLine): LinearMoveInstruction {
    return new LinearMoveInstruction({
        x: line.x,
        y: line.y,
        z: line.z,
        extrusion: line.e,
        feedrate: line.f,
        relativeX: true,
        relativeY: true,
        relativeZ: true,
        relativeExtrusion: true,
        comment: line.comment
    });
}
function fromG197(line: GCodeLine): PauseAndMoveInstruction {
    return new PauseAndMoveInstruction({
        x: 0,
        y: 100,
        comment: line.comment
    });
}

/**
 * RaftInstruction-to-GCode translation functions
 */

function fromRelativeLinearMove(instruction: LinearMoveInstruction): GCodeLine {
    return {
        command: "G101",
        x: (instruction.x === null ? undefined : instruction.x),
        y: (instruction.y === null ? undefined : instruction.y),
        z: (instruction.z === null ? undefined : instruction.z),
        e: (instruction.extrusion === null ? undefined : instruction.extrusion),
        f: (instruction.feedrate === null ? undefined : instruction.feedrate),
        comment: instruction.comment
    };
}
function fromPauseAndMove(instruction: PauseAndMoveInstruction): GCodeLine {
    return {
        command: "G197",
        comment: instruction.comment
    };
}
