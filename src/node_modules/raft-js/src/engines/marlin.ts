/**
 * @module RaftEngine
 */ /** */

import SmoothieEngine, {SmoothieEngineOptions} from "./smoothie";
import {GCodeLine} from "../parsers/gcode";
import RaftInstruction from "../instructions/base";
import SetFanInstruction from "../instructions/set-fan";
import {unknownInstruction} from "./base";
import SleepInstruction from "../instructions/sleep";
import {fromM117, fromM300} from "./reprap";
import PauseAndMoveInstruction from "../instructions/pause-and-move";
import SetLightInstruction from "../instructions/set-light";
import SetMaxPrintAccelerationInstruction from "../instructions/set-max-print-acceleration";
import EmergencyStopInstruction from "../instructions/emergency-stop";
import EmptyInstruction from "../instructions/empty";

export interface MarlinEngineOptions extends SmoothieEngineOptions {
}

export default class MarlinEngine extends SmoothieEngine {

    public constructor(options: MarlinEngineOptions) {
        super(options);
    }

    public clone(): MarlinEngine {
        let copy = new MarlinEngine({
            toolheadCount: this.toolheadCount,
            independentExtruders: this.independentExtruders,
            volumetricExtrusion: this.volumetricExtrusion,
            defaultHomeDirectionMax: this.defaultHomeDirectionMax,
            filamentDiameter: this.filamentDiameter,
            initialXYZCoordinateMode: this.stateMachines["x"].getCurrentState().coordinateMode,
            initialExtrusionCoordinateMode: this.stateMachines["extrusion"].getCurrentState().coordinateMode
        });
        this.copyStateMachinesTo(copy);
        return copy;
    }

    public toRaftInstruction(line: GCodeLine): RaftInstruction {

        if (!line.command) {
            return new EmptyInstruction({
                comment: line.comment
            });
        }

        if (line.command === "G28") return unknownInstruction(line, this.config);

        if (line.command === "M0" || line.command === "M1") return fromM0M1(line);
        if (line.command === "M106") return fromM106(line);
        if (line.command === "M116") return unknownInstruction(line, this.config);
        if (line.command === "M117") return fromM117(line);
        if (line.command === "M125") return fromM125(line);
        if (line.command === "M150") return fromM150(line);
        if (line.command === "M201") return fromM201(line);
        if (line.command === "M203") return unknownInstruction(line, this.config);
        if (line.command === "M300") return fromM300(line);
        if (line.command === "M410") return fromM410(line);
        if (line.command === "M564") return unknownInstruction(line, this.config);
        if (line.command === "M566") return unknownInstruction(line, this.config);

        return super.toRaftInstruction(line);
    }

    public toOutputInstruction(instruction: RaftInstruction): GCodeLine {

        if (instruction instanceof SleepInstruction) return fromSleep(instruction);
        if (instruction instanceof SetFanInstruction) return fromSetFan(instruction);
        if (instruction instanceof PauseAndMoveInstruction) return fromPauseAndMove(instruction);
        if (instruction instanceof SetLightInstruction) return fromSetLight(instruction);
        if (instruction instanceof EmergencyStopInstruction) return fromEmergencyStop(instruction);

        return super.toOutputInstruction(instruction);
    }

    public toString(): string {
        return "MarlinEngine";
    }

}

/**
 * GCode-to-RaftInstruction translation functions
 */

function fromM0M1(line: GCodeLine): SleepInstruction {
    return new SleepInstruction({
        timeoutSeconds: line.s,
        timeoutMilliseconds: line.p,
        comment: line.comment
    });
}
function fromM106(line: GCodeLine): SetFanInstruction {
    if (line.s === undefined) {
        return new SetFanInstruction({
            isToggle: true,
            value: true,
            fanNumber: line.p,
            comment: line.comment
        });
    }
    return new SetFanInstruction({
        isToggle: false,
        fanNumber: line.p,
        value: line.s,
        comment: line.comment
    });
}
function fromM125(line: GCodeLine): PauseAndMoveInstruction {
    return new PauseAndMoveInstruction({
        retraction: line.l,
        x: line.x,
        y: line.y,
        z: line.z,
        comment: line.comment
    });
}
function fromM150(line: GCodeLine): SetLightInstruction {
    return new SetLightInstruction({
        r: line.r,
        g: line.u,
        b: line.b,
        comment: line.comment
    });
}
function fromM201(line: GCodeLine): SetMaxPrintAccelerationInstruction {
    return new SetMaxPrintAccelerationInstruction({
        extrusion: line.e,
        x: line.x,
        y: line.y,
        z: line.z,
        comment: line.comment
    });
}
function fromM410(line: GCodeLine): EmergencyStopInstruction {
    return new EmergencyStopInstruction({
        comment: line.comment
    });
}

/**
 * RaftInstruction-to-GCode translation functions
 */

function fromSleep(instruction: SleepInstruction): GCodeLine {
    return {
        command: "M0",
        s: (instruction.timeoutSeconds === null ? undefined : instruction.timeoutSeconds),
        p: (instruction.timeoutMilliseconds === null ? undefined : instruction.timeoutMilliseconds),
        comment: instruction.comment
    };
}
function fromSetFan(instruction: SetFanInstruction): GCodeLine {
    if (instruction.isToggle) {
        if (instruction.value) {
            return {
                command: "M106",
                p: (instruction.fanNumber === null ? undefined : instruction.fanNumber),
                comment: instruction.comment
            };
        } else {
            return {
                command: "M107",
                p: (instruction.fanNumber === null ? undefined : instruction.fanNumber),
                comment: instruction.comment
            };
        }
    }
    return {
        command: "M106",
        s: (instruction.value === null ? undefined : instruction.value),
        p: (instruction.fanNumber === null ? undefined : instruction.fanNumber),
        comment: instruction.comment
    };
}
function fromPauseAndMove(instruction: PauseAndMoveInstruction): GCodeLine {
    return {
        command: "M125",
        l: (instruction.retraction === null ? undefined : instruction.retraction),
        x: (instruction.x === null ? undefined : instruction.x),
        y: (instruction.y === null ? undefined : instruction.y),
        z: (instruction.z === null ? undefined : instruction.z),
        comment: instruction.comment
    };
}
function fromSetLight(instruction: SetLightInstruction): GCodeLine {
    return {
        command: "M150",
        r: (instruction.r === null ? undefined : instruction.r),
        u: (instruction.g === null ? undefined : instruction.g),
        b: (instruction.b === null ? undefined : instruction.b),
        comment: instruction.comment
    };
}
function fromEmergencyStop(instruction: EmergencyStopInstruction): GCodeLine {
    return {
        command: "M410",
        comment: instruction.comment
    };
}
