/**
 * @module RaftEngine
 */ /** */

import RepRapEngine, {RepRapEngineOptions} from "./reprap";
import {GCodeLine} from "../parsers/gcode";
import RaftInstruction from "../instructions/base";
import SetFanInstruction from "../instructions/set-fan";
import EnableStepperMotorInstruction from "../instructions/enable-stepper-motor";
import DisableStepperMotorInstruction from "../instructions/disable-stepper-motor";
import SetRetractLengthInstruction from "../instructions/set-retract-length";
import {unknownInstruction} from "./base";
import EmptyInstruction from "../instructions/empty";

export interface SmoothieEngineOptions extends RepRapEngineOptions {
}

export default class SmoothieEngine extends RepRapEngine {

    public constructor(options: SmoothieEngineOptions) {
        super(options);
    }

    public clone(): SmoothieEngine {
        let copy = new SmoothieEngine({
            toolheadCount: this.toolheadCount,
            independentExtruders: this.independentExtruders,
            volumetricExtrusion: this.volumetricExtrusion,
            defaultHomeDirectionMax: this.defaultHomeDirectionMax,
            filamentDiameter: this.filamentDiameter,
            initialXYZCoordinateMode: this.stateMachines["x"].getCurrentState().coordinateMode,
            initialExtrusionCoordinateMode: this.stateMachines["extrusion"].getCurrentState().coordinateMode
        });
        this.copyStateMachinesTo(copy);
        return copy;
    }

    public toRaftInstruction(line: GCodeLine): RaftInstruction {

        if (!line.command) {
            return new EmptyInstruction({
                comment: line.comment
            });
        }

        if (line.command === "M0") return unknownInstruction(line, this.config);
        if (line.command === "M1") return unknownInstruction(line, this.config);
        if (line.command === "M17") return fromM17(line);
        if (line.command === "M18" || line.command === "M84") return fromM18M84(line);
        if (line.command === "M106") return fromM106(line);
        if (line.command === "M116") return unknownInstruction(line, this.config);
        if (line.command === "M117") return unknownInstruction(line, this.config);
        if (line.command === "M135") return unknownInstruction(line, this.config);
        if (line.command === "M144") return unknownInstruction(line, this.config);
        if (line.command === "M201") return unknownInstruction(line, this.config);
        if (line.command === "M207") return fromM207(line);
        if (line.command === "M208") return fromM208(line);
        if (line.command === "M226") return unknownInstruction(line, this.config);
        if (line.command === "M300") return unknownInstruction(line, this.config);

        return super.toRaftInstruction(line);
    }

    public toOutputInstruction(instruction: RaftInstruction): GCodeLine {

        if (instruction instanceof EnableStepperMotorInstruction) return fromEnableStepperMotor(instruction);
        if (instruction instanceof DisableStepperMotorInstruction) return fromDisableStepperMotor(instruction);
        if (instruction instanceof SetFanInstruction) return fromSetFan(instruction);
        if (instruction instanceof SetRetractLengthInstruction) return fromSetRetractLength(instruction);

        return super.toOutputInstruction(instruction);
    }

    public toString(): string {
        return "SmoothieEngine";
    }

}

/**
 * GCode-to-RaftInstruction translation functions
 */

function fromM17(line: GCodeLine): EnableStepperMotorInstruction {
    return new EnableStepperMotorInstruction({
        comment: line.comment
    });
}
function fromM18M84(line: GCodeLine): DisableStepperMotorInstruction {
    if (line.command === "M84"
        || (line.x === undefined && line.y === undefined && line.z === undefined
        && line.a === undefined && line.b === undefined && line.e === undefined)) {
        return new DisableStepperMotorInstruction({
            comment: line.comment
        });
    }
    return new DisableStepperMotorInstruction({
        x: line.hasOwnProperty("x"),
        y: line.hasOwnProperty("y"),
        z: line.hasOwnProperty("z"),
        a: line.hasOwnProperty("a"),
        b: line.hasOwnProperty("b"),
        e: line.hasOwnProperty("e"),
        comment: line.comment
    });
}
function fromM106(line: GCodeLine): SetFanInstruction {
    return new SetFanInstruction({
        isToggle: true,
        value: true,
        comment: line.comment
    });
}
function fromM207(line: GCodeLine): SetRetractLengthInstruction {
    return new SetRetractLengthInstruction({
        retractLength: line.s,
        retractFeedrate: line.f,
        zLift: line.z,
        comment: line.comment
    });
}
function fromM208(line: GCodeLine): SetRetractLengthInstruction {
    return new SetRetractLengthInstruction({
        unretractLengthOffset: line.s,
        unretractFeedrate: line.f,
        comment: line.comment
    });
}

/**
 * RaftInstruction-to-GCode translation functions
 */

function fromEnableStepperMotor(instruction: EnableStepperMotorInstruction): GCodeLine {
    return {
        command: "M17",
        comment: instruction.comment
    };
}
function fromDisableStepperMotor(instruction: DisableStepperMotorInstruction): GCodeLine {
    if (instruction.x === null && instruction.y === null && instruction.z === null
        && instruction.a === null && instruction.b === null && instruction.e === null) {
        return {
            command: "M84",
            comment: instruction.comment
        }
    }
    if (instruction.x === true && instruction.y === true && instruction.z === true
        && instruction.a === true && instruction.b === true && instruction.e === true) {
        return {
            command: "M84",
            comment: instruction.comment
        }
    }
    return {
        command: "M18",
        x: (instruction.x === null || instruction.x === true) ? undefined : 0,
        y: (instruction.y === null || instruction.y === true) ? undefined : 0,
        z: (instruction.z === null || instruction.z === true) ? undefined : 0,
        a: (instruction.a === null || instruction.a === true) ? undefined : 0,
        b: (instruction.b === null || instruction.b === true) ? undefined : 0,
        e: (instruction.e === null || instruction.e === true) ? undefined : 0,
        comment: instruction.comment
    };
}
function fromSetFan(instruction: SetFanInstruction): GCodeLine {
    if (instruction.value) {
        return {
            command: "M106",
            comment: instruction.comment
        }
    } else {
        return {
            command: "M107",
            comment: instruction.comment
        }
    }
}
function fromSetRetractLength(instruction: SetRetractLengthInstruction): GCodeLine {
    if (instruction.retractLength === null) {
        return {
            command: "M208",
            s: instruction.unretractLengthOffset,
            f: instruction.unretractFeedrate,
            comment: instruction.comment
        }
    } else {
        return {
            command: "M207",
            s: instruction.retractLength,
            f: instruction.retractFeedrate,
            z: instruction.zLift,
            comment: instruction.comment
        }
    }
}
