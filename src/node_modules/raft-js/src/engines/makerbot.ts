/**
 * @module RaftEngine
 */ /** */

import RepRapEngine, {RepRapEngineOptions} from "./reprap";
import {GCodeLine} from "../parsers/gcode";
import RaftInstruction from "../instructions/base";
import SetBedTemperatureInstruction from "../instructions/set-bed-temperature";
import ToolChangeInstruction from "../instructions/toolchange";
import SetBuildProgressInstruction from "../instructions/set-build-progress";
import HomeInstruction from "../instructions/home";
import SetFanInstruction from "../instructions/set-fan";
import StabilizeToolheadTemperatureInstruction from "../instructions/stabilize-toolhead-temperature";
import PlaySongInstruction from "../instructions/play-song";
import SetPotentiometerValueInstruction from "../instructions/set-potentiometer-value";
import DisplayMessageInstruction from "../instructions/display-message";
import ProgramEndInstruction from "../instructions/program-end";
import LoadAxisOffsetInstruction from "../instructions/load-axis-offset";
import StabilizeBedTemperatureInstruction from "../instructions/stabilize-bed-temperature";
import {unknownInstruction} from "./base";
import SetPositionInstruction from "../instructions/set-position";
import EmptyInstruction from "../instructions/empty";

export interface MakerbotEngineOptions extends RepRapEngineOptions {
}

export default class MakerbotEngine extends RepRapEngine {

    public constructor(options: MakerbotEngineOptions) {
        super(options);
    }

    public clone(): MakerbotEngine {
        let copy = new MakerbotEngine({
            toolheadCount: this.toolheadCount,
            independentExtruders: this.independentExtruders,
            volumetricExtrusion: this.volumetricExtrusion,
            defaultHomeDirectionMax: this.defaultHomeDirectionMax,
            filamentDiameter: this.filamentDiameter,
            initialXYZCoordinateMode: this.stateMachines["x"].getCurrentState().coordinateMode,
            initialExtrusionCoordinateMode: this.stateMachines["extrusion"].getCurrentState().coordinateMode
        });
        this.copyStateMachinesTo(copy);
        return copy;
    }

    public toRaftInstruction(line: GCodeLine): RaftInstruction {

        if (!line.command) {
            return new EmptyInstruction({
                comment: line.comment
            });
        }

        if (line.command === "G92") return fromG92(line);
        if (line.command === "G130") return fromG130(line);
        if (line.command === "G161" || line.command === "G162") return fromG161G162(line);

        if (line.command === "M2") return fromM2(line);
        if (line.command === "M70") return fromM70(line);
        if (line.command === "M72") return fromM72(line);
        if (line.command === "M73") return fromM73(line);
        if (line.command === "M109") return fromM109(line);
        if (line.command === "M117") return unknownInstruction(line, this.config);
        if (line.command === "M126") return fromM126(line);
        if (line.command === "M127") return fromM127(line);
        if (line.command === "M132") return fromM132(line);
        if (line.command === "M133") return fromM133(line);
        if (line.command === "M134") return fromM134(line);
        if (line.command === "M135") return fromM135(line);

        if (line.command && line.command[0].toUpperCase()  === "T") return unknownInstruction(line, this.config);

        return super.toRaftInstruction(line);
    }

    public toOutputInstruction(instruction: RaftInstruction): GCodeLine {

        if (instruction instanceof SetPositionInstruction) return fromSetPosition(instruction);
        if (instruction instanceof SetPotentiometerValueInstruction) return fromSetPotentiometerValue(instruction);
        if (instruction instanceof HomeInstruction) return fromHome(instruction);

        if (instruction instanceof ProgramEndInstruction) return fromProgramEnd(instruction);
        if (instruction instanceof DisplayMessageInstruction) return fromDisplayMessage(instruction);
        if (instruction instanceof PlaySongInstruction) return fromPlaySong(instruction);
        if (instruction instanceof SetBuildProgressInstruction) return fromSetBuildProgress(instruction);
        if (instruction instanceof SetBedTemperatureInstruction) return fromSetBedTemperature(instruction);
        if (instruction instanceof SetFanInstruction) return fromSetFan(instruction);
        if (instruction instanceof LoadAxisOffsetInstruction) return fromLoadAxisOffset(instruction);
        if (instruction instanceof StabilizeToolheadTemperatureInstruction) return fromStabilizeToolheadTemperature(instruction);
        if (instruction instanceof StabilizeBedTemperatureInstruction) return fromStabilizeBedTemperature(instruction);
        if (instruction instanceof ToolChangeInstruction) return fromToolChange(instruction);

        return super.toOutputInstruction(instruction);
    }

    public toString(): string {
        return "MakerbotEngine";
    }

}

/**
 * GCode-to-RaftInstruction translation functions
 */

function fromG92(line: GCodeLine): SetPositionInstruction {
    if (line.x === undefined && line.y === undefined && line.z === undefined && line.a === undefined && line.e === undefined) {
        return new SetPositionInstruction({
            x: 0,
            y: 0,
            z: 0,
            extrusion: 0,
            comment: line.comment
        });
    }
    return new SetPositionInstruction({
        x: line.x,
        y: line.y,
        z: line.z,
        extrusion: (line.a === undefined ? line.e : line.a),
        comment: line.comment
    });
}
function fromG130(line: GCodeLine): SetPotentiometerValueInstruction {
    return new SetPotentiometerValueInstruction({
        x: line.x,
        y: line.y,
        z: line.z,
        a: line.a,
        b: line.b,
        comment: line.comment
    });
}
function fromG161G162(line: GCodeLine): HomeInstruction {
    return new HomeInstruction({
        x: line.hasOwnProperty("x"),
        y: line.hasOwnProperty("y"),
        z: line.hasOwnProperty("z"),
        toMaximum: (line.command === "G162"),
        feedrate: line.f,
        comment: line.comment
    });
}
function fromM2(line: GCodeLine): ProgramEndInstruction {
    return new ProgramEndInstruction({
        comment: line.comment
    });
}
function fromM70(line: GCodeLine): DisplayMessageInstruction {
    return new DisplayMessageInstruction({
        message: line.message,
        duration: line.p
    });
}
function fromM72(line: GCodeLine): PlaySongInstruction {
    return new PlaySongInstruction({
        id: line.p,
        comment: line.comment
    });
}
function fromM73(line: GCodeLine): SetBuildProgressInstruction {
    return new SetBuildProgressInstruction({
        percentage: line.p,
        comment: line.comment
    });
}
function fromM109(line: GCodeLine): SetBedTemperatureInstruction {
    return new SetBedTemperatureInstruction({
        temperature: line.s,
        bedNumber: line.t,
        comment: line.comment
    });
}
function fromM126(line: GCodeLine): SetFanInstruction {
    return new SetFanInstruction({
        isToggle: line.s === undefined,
        fanNumber: line.t,
        value: (line.s === undefined ? true : line.s),
        comment: line.comment
    });
}
function fromM127(line: GCodeLine): SetFanInstruction {
    return new SetFanInstruction({
        isToggle: true,
        fanNumber: line.t,
        value: false,
        comment: line.comment
    });
}
export function fromM132(line: GCodeLine): LoadAxisOffsetInstruction {
    return new LoadAxisOffsetInstruction({
        x: line.hasOwnProperty("x"),
        y: line.hasOwnProperty("y"),
        z: line.hasOwnProperty("z"),
        a: line.hasOwnProperty("a"),
        b: line.hasOwnProperty("b"),
        comment: line.comment
    });
}
function fromM133(line: GCodeLine): StabilizeToolheadTemperatureInstruction {
    return new StabilizeToolheadTemperatureInstruction({
        toolhead: line.t,
        stabilizeTimeout: line.p,
        comment: line.comment
    });
}
function fromM134(line: GCodeLine): StabilizeBedTemperatureInstruction {
    return new StabilizeBedTemperatureInstruction({
        bedNumber: line.t,
        stabilizeTimeout: line.p,
        comment: line.comment
    });
}
function fromM135(line: GCodeLine): ToolChangeInstruction {
    return new ToolChangeInstruction({
        toolhead: line.t,
        comment: line.comment
    });
}

/**
 * RaftInstruction-to-GCode translation functions
 */

function fromSetPosition(instruction: SetPositionInstruction): GCodeLine {
    if (instruction.x === null && instruction.y === null && instruction.z === null && instruction.extrusion === null) {
        return {
            command: "G92",
            comment: instruction.comment
        }
    }
    return {
        command: "G92",
        x: (instruction.x === null ? undefined : instruction.x),
        y: (instruction.y === null ? undefined : instruction.y),
        z: (instruction.z === null ? undefined : instruction.z),
        a: (instruction.extrusion === null ? undefined : instruction.extrusion),
        comment: instruction.comment
    };
}
function fromSetPotentiometerValue(instruction: SetPotentiometerValueInstruction): GCodeLine {
    return {
        command: "G130",
        x: (instruction.x === null ? undefined : instruction.x),
        y: (instruction.y === null ? undefined : instruction.y),
        z: (instruction.z === null ? undefined : instruction.z),
        a: (instruction.a === null ? undefined : instruction.a),
        b: (instruction.b === null ? undefined : instruction.b),
        comment: instruction.comment
    };
}
function fromHome(instruction: HomeInstruction): GCodeLine {
    return {
        command: (instruction.toMaximum ? "G162" : "G161"),
        x: (instruction.x === false ? undefined : null),
        y: (instruction.y === false ? undefined : null),
        z: (instruction.z === false ? undefined : null),
        f: (instruction.feedrate === null ? undefined : instruction.feedrate),
        comment: instruction.comment
    };
}
function fromProgramEnd(instruction: ProgramEndInstruction): GCodeLine {
    return {
        command: "M2",
        comment: instruction.comment
    };
}
function fromDisplayMessage(instruction: DisplayMessageInstruction): GCodeLine {
    return {
        command: "M70",
        p: instruction.duration,
        message: instruction.message,
        comment: instruction.comment
    };
}
function fromPlaySong(instruction: PlaySongInstruction): GCodeLine {
    return {
        command: "M72",
        p: instruction.id,
        comment: instruction.comment
    };
}
function fromSetBuildProgress(instruction: SetBuildProgressInstruction): GCodeLine {
    return {
        command: "M73",
        p: instruction.percentage,
        comment: instruction.comment
    };
}
function fromSetBedTemperature(instruction: SetBedTemperatureInstruction): GCodeLine {
    if (instruction.stabilize) {
        return {
            command: "M109",
            s: instruction.temperature,
            t: (instruction.bedNumber === null ? undefined : instruction.bedNumber),
            comment: instruction.comment
        };
    }
    return {
        command: "M140",
        s: instruction.temperature,
        t: (instruction.bedNumber === null ? undefined : instruction.bedNumber),
        comment: instruction.comment
    };
}
function fromSetFan(instruction: SetFanInstruction): GCodeLine {
    if (instruction.value === 0) {
        return {
            command: "M127",
            t: (instruction.fanNumber === null ? undefined : instruction.fanNumber),
            comment: instruction.comment
        };
    } else {
        return {
            command: "M126",
            t: (instruction.fanNumber === null ? undefined : instruction.fanNumber),
            s: (instruction.isToggle ? undefined : instruction.value),
            comment: instruction.comment
        };
    }
}
export function fromLoadAxisOffset(instruction: LoadAxisOffsetInstruction): GCodeLine {
    return {
        command: "M132",
        x: instruction.x ? null : undefined,
        y: instruction.y ? null : undefined,
        z: instruction.z ? null : undefined,
        a: instruction.a ? null : undefined,
        b: instruction.b ? null : undefined,
        comment: instruction.comment
    };
}
function fromStabilizeToolheadTemperature(instruction: StabilizeToolheadTemperatureInstruction): GCodeLine {
    return {
        command: "M133",
        t: instruction.toolhead,
        p: (instruction.stabilizeTimeout === null ? undefined : instruction.stabilizeTimeout),
        comment: instruction.comment
    };
}
function fromStabilizeBedTemperature(instruction: StabilizeBedTemperatureInstruction): GCodeLine {
    return {
        command: "M134",
        t: instruction.bedNumber,
        p: (instruction.stabilizeTimeout === null ? undefined : instruction.stabilizeTimeout),
        comment: instruction.comment
    };
}
function fromToolChange(instruction: ToolChangeInstruction): GCodeLine {
    return {
        command: "M135",
        t: instruction.toolhead,
        comment: instruction.comment
    };
}
