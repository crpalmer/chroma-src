/**
 * @module RaftStateMachine
 */ /** */

import {validateNumber} from "../common/validation";
import {isNullOrUndefined} from "util";
import InvalidStateParamsError from "../errors/invalid-state-params";
import DispenserStateMachine, {DispenserState, DispenserStateParams} from "./dispenser";

export interface ExtrusionAxisStateParams extends DispenserStateParams {
    retractDistance: number,
    unretractExtraLength: number
}

export class ExtrusionAxisState extends DispenserState {

    public readonly retractDistance: number;
    public readonly unretractExtraLength: number;

    public constructor (params: ExtrusionAxisStateParams) {
        if (params.retractDistance !== null) {
            if (params.retractDistance === undefined || !validateNumber(params.retractDistance) || params.retractDistance < 0) {
                throw new InvalidStateParamsError("Invalid retractDistance parameter '" + params.retractDistance + "' supplied to ExtrusionAxisState");
            }
        }
        if (params.unretractExtraLength !== null) {
            if (params.unretractExtraLength === undefined || !validateNumber(params.unretractExtraLength) || params.unretractExtraLength < 0) {
                throw new InvalidStateParamsError("Invalid unretractExtraLength parameter '" + params.unretractExtraLength + "' supplied to ExtrusionAxisState");
            }
        }
        super(params);
        this.retractDistance = params.retractDistance;
        this.unretractExtraLength = params.unretractExtraLength;
    }

    public clone(): ExtrusionAxisState {
        return new ExtrusionAxisState({
            position: this.position,
            coordinateMode: this.coordinateMode,
            totalDispensed: this.totalDispensed,
            retraction: this.retraction,
            retractDistance: this.retractDistance,
            unretractExtraLength: this.unretractExtraLength
        });
    }

    public toString(): string {
        return "ExtrusionAxisState";
    }

}

export default class ExtrusionAxisStateMachine extends DispenserStateMachine {

    protected current: ExtrusionAxisState;

    public constructor (initialState: ExtrusionAxisState) {
        super(initialState);
    }

    public insertState(state: ExtrusionAxisState): void {
        super.insertState(state);
    }

    public clone(): ExtrusionAxisStateMachine {
        let copy = new ExtrusionAxisStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }

    public toString(): string {
        return "ExtrusionAxisStateMachine";
    }

}
