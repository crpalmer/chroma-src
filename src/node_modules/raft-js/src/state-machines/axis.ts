/**
 * @module RaftStateMachine
 */ /** */

import {validateNumber} from "../common/validation";
import {isNullOrUndefined} from "util";
import InvalidStateParamsError from "../errors/invalid-state-params";
import RaftStateMachine, {RaftState, RaftStateParams} from "./base";

export interface AxisStateParams extends RaftStateParams {
    position: number
}

export class AxisState extends RaftState {

    public readonly position: number;

    public constructor (params: AxisStateParams) {
        if (params.position !== null) {
            if (params.position === undefined || !validateNumber(params.position)) {
                throw new InvalidStateParamsError("Invalid position parameter '" + params.position + "' supplied to AxisState");
            }
        }
        super(params);
        this.position = params.position;
    }

    public clone(): AxisState {
        return new AxisState({
            position: this.position
        });
    }

    public toString(): string {
        return "AxisState";
    }

}

export default class AxisStateMachine extends RaftStateMachine {

    protected current: AxisState;

    public constructor (initialState: AxisState) {
        super(initialState);
    }

    public insertState(state: AxisState): void {
        super.insertState(state);
    }

    public clone(): AxisStateMachine {
        let copy = new AxisStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }

    public toString(): string {
        return "AxisStateMachine";
    }

}
