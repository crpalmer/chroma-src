/**
 * @module RaftStateMachine
 */ /** */

import {validateNumber} from "../common/validation";
import {isNullOrUndefined} from "util";
import PhysicalAxisStateMachine, {PhysicalAxisState, PhysicalAxisStateParams} from "./physical-axis";
import InvalidStateParamsError from "../errors/invalid-state-params";

export interface DispenserStateParams extends PhysicalAxisStateParams {
    totalDispensed: number,
    retraction: number
}

export class DispenserState extends PhysicalAxisState {

    public readonly totalDispensed: number;
    public readonly retraction: number;

    public constructor (params: DispenserStateParams) {
        super(params);
        if (isNullOrUndefined(params.totalDispensed) || !validateNumber(params.totalDispensed)) {
            throw new InvalidStateParamsError("Invalid totalDispensed parameter '" + params.totalDispensed + "' supplied to DispenserState");
        }
        if (isNullOrUndefined(params.retraction) || !validateNumber(params.retraction) || params.retraction < 0) {
            throw new InvalidStateParamsError("Invalid retraction parameter '" + params.retraction + "' supplied to DispenserState");
        }
        this.totalDispensed = params.totalDispensed;
        this.retraction = params.retraction;
    }

    public clone(): DispenserState {
        return new DispenserState({
            position: this.position,
            coordinateMode: this.coordinateMode,
            totalDispensed: this.totalDispensed,
            retraction: this.retraction
        });
    }

    public toString(): string {
        return "DispenserState";
    }

}

export default class DispenserStateMachine extends PhysicalAxisStateMachine {

    protected current: DispenserState;

    public constructor (initialState: DispenserState) {
        super(initialState);
    }

    public insertState(state: DispenserState): void {
        super.insertState(state);
    }

    public clone(): DispenserStateMachine {
        let copy = new DispenserStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }

    public toString(): string {
        return "DispenserStateMachine";
    }

}
