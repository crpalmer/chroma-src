/**
 * @module RaftStateMachine
 */ /** */

import Stack from "../common/stack";
import BadMethodCallError from "../errors/bad-method-call";

export interface RaftStateParams {}

export class RaftState {

    public constructor (params: RaftStateParams) {}

    public clone(): RaftState {
        return new RaftState({});
    }

    public toString(): string {
        return "RaftState";
    }

}

abstract class RaftStateMachine {

    public stateInserted: boolean;

    /**
     * FINAL
     */
    protected history: Stack<RaftState>;
    /**
     * FINAL
     */
    protected future: Stack<RaftState>;
    /**
     * FINAL
     */
    protected current: RaftState;

    public constructor (initialState: RaftState) {
        this.history = new Stack<RaftState>();
        this.future = new Stack<RaftState>();
        this.current = initialState;
        this.stateInserted = false;
    }

    /**
     * FINAL
     */
    public insertState(state: RaftState): void {
        this.history.push(this.current);
        this.current = state;
        this.future.clear();
    }

    /**
     * FINAL
     */
    public insertCurrentState(): void {
        this.insertState(this.current);
    }

    /**
     * FINAL
     */
    public stepForward(): void {
        if (this.future.isEmpty()) {
            throw new BadMethodCallError("Cannot step forward - future stack is empty");
        }
        this.history.push(this.current);
        this.current = this.future.pop();
    }

    /**
     * FINAL
     */
    public stepBackward(): void {
        if (this.history.isEmpty()) {
            throw new BadMethodCallError("Cannot step backward - history stack is empty");
        }
        this.future.push(this.current);
        this.current = this.history.pop();
    }

    /**
     * FINAL
     */
    public invalidateFuture(): void {
        this.future.clear();
    }

    public futureIsEmpty(): boolean {
        return this.future.isEmpty();
    }

    /**
     * FINAL
     */
    public getCurrentState(): RaftState {
        return this.current.clone();
    }

    public abstract clone(): RaftStateMachine;
    protected deepCopyStatesTo(other: RaftStateMachine): void {
        other.history = this.history.deepCopy();
        other.future = this.future.deepCopy();
        other.current = this.current.clone();
    }

    public toString(): string {
        return "RaftStateMachine";
    }

}
export default RaftStateMachine;
