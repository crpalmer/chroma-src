/**
 * @module RaftStateMachine
 */ /** */

import InvalidStateParamsError from "../errors/invalid-state-params";
import AxisStateMachine, {AxisState, AxisStateParams} from "./axis";
import {CoordinateModes} from "../enums";

export interface PhysicalAxisStateParams extends AxisStateParams {
    coordinateMode: CoordinateModes
}

export class PhysicalAxisState extends AxisState {

    public readonly coordinateMode: CoordinateModes;

    public constructor (params: PhysicalAxisStateParams) {
        if (!(params.coordinateMode in CoordinateModes)) {
            throw new InvalidStateParamsError("Invalid coordinateMode parameter '" + params.coordinateMode + "' supplied to PhysicalAxisState");
        }
        super(params);
        this.coordinateMode = params.coordinateMode;
    }

    public clone(): PhysicalAxisState {
        return new PhysicalAxisState({
            position: this.position,
            coordinateMode: this.coordinateMode
        });
    }

    public toString(): string {
        return "PhysicalAxisState";
    }

}

export default class PhysicalAxisStateMachine extends AxisStateMachine {

    protected current: PhysicalAxisState;

    public constructor (initialState: PhysicalAxisState) {
        super(initialState);
    }

    public insertState(state: PhysicalAxisState): void {
        super.insertState(state);
    }

    public clone(): PhysicalAxisStateMachine {
        let copy = new PhysicalAxisStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }

    public toString(): string {
        return "PhysicalAxisStateMachine";
    }

}
