/**
 * @module RaftStateMachine
 */ /** */

import {isNullOrUndefined} from "util";
import InvalidStateParamsError from "../errors/invalid-state-params";
import {validateNumber} from "../common/validation";
import PhysicalAxisStateMachine, {PhysicalAxisState, PhysicalAxisStateParams} from "./physical-axis";

export interface OffsetAxisStateParams extends PhysicalAxisStateParams {
    offset: number
}

export class OffsetAxisState extends PhysicalAxisState {

    public readonly offset: number;

    public constructor (params: OffsetAxisStateParams) {
        if (isNullOrUndefined(params.offset) || !validateNumber(params.offset)) {
            throw new InvalidStateParamsError("Invalid offset parameter '" + params.offset + "' supplied to OffsetAxisState");
        }
        super(params);
        this.offset = params.offset;
    }

    public clone(): OffsetAxisState {
        return new OffsetAxisState({
            coordinateMode: this.coordinateMode,
            position: this.position,
            offset: this.offset
        });
    }

    public toString(): string {
        return "OffsetAxisState";
    }

}

export default class OffsetAxisStateMachine extends PhysicalAxisStateMachine {

    protected current: OffsetAxisState;

    public constructor (initialState: OffsetAxisState) {
        super(initialState);
    }

    public insertState(state: OffsetAxisState): void {
        super.insertState(state);
    }

    public clone(): OffsetAxisStateMachine {
        let copy = new OffsetAxisStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }

    public toString(): string {
        return "OffsetAxisStateMachine";
    }

}
