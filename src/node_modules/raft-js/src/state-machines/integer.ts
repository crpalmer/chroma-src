/**
 * @module RaftStateMachine
 */ /** */

import RaftStateMachine, {RaftState, RaftStateParams} from "./base";
import {validateInt} from "../common/validation";
import {isNullOrUndefined} from "util";
import InvalidStateParamsError from "../errors/invalid-state-params";

export interface IntegerStateParams extends RaftStateParams {
    value: number
}

export class IntegerState extends RaftState {

    public readonly value: number;

    public constructor (params: IntegerStateParams) {
        if (params.value !== null) {
            if (params.value === undefined || !validateInt(params.value)) {
                throw new InvalidStateParamsError("Invalid value parameter '" + params.value + "' supplied to IntegerState");
            }
        }
        super(params);
        this.value = params.value;
    }

    public clone(): IntegerState {
        return new IntegerState({
            value: this.value
        });
    }

    public toString(): string {
        return "IntegerState";
    }

}

export default class IntegerStateMachine extends RaftStateMachine {

    protected current: IntegerState;

    public constructor (initialState: IntegerState) {
        super(initialState);
    }

    public insertState(state: IntegerState): void {
        super.insertState(state);
    }

    public clone(): IntegerStateMachine {
        let copy = new IntegerStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }

    public toString(): string {
        return "IntegerStateMachine";
    }

}
