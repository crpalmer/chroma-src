/**
 * @module RaftStateMachine
 */ /** */

import IntegerStateMachine, {IntegerState, IntegerStateParams} from "./integer";
import {validateInt} from "../common/validation";
import {isNullOrUndefined} from "util";
import InvalidStateParamsError from "../errors/invalid-state-params";

export interface IndexStateParams extends IntegerStateParams {
    value: number
}

export class IndexState extends IntegerState {

    public readonly value: number;

    public constructor (params: IndexStateParams) {
        if (params.value !== null) {
            if (params.value === undefined || !validateInt(params.value) || params.value < 0) {
                throw new InvalidStateParamsError("Invalid value parameter '" + params.value + "' supplied to IndexState");
            }
        }
        super(params);
        this.value = params.value;
    }

    public clone(): IndexState {
        return <IndexState> super.clone();
    }

    public toString(): string {
        return "IndexState";
    }

}

export default class IndexStateMachine extends IntegerStateMachine {

    protected current: IndexState;

    public constructor (initialState: IndexState) {
        super(initialState);
    }

    public insertState(state: IndexState): void {
        super.insertState(state);
    }

    public clone(): IndexStateMachine {
        let copy = new IndexStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }

    public toString(): string {
        return "IndexStateMachine";
    }

}
