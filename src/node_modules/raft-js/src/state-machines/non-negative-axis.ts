/**
 * @module RaftStateMachine
 */ /** */

import {isNullOrUndefined} from "util";
import InvalidStateParamsError from "../errors/invalid-state-params";
import {validateNumber} from "../common/validation";
import AxisStateMachine, {AxisState, AxisStateParams} from "./axis";

export interface NonNegativeAxisStateParams extends AxisStateParams {}

export class NonNegativeAxisState extends AxisState {

    public constructor (params: NonNegativeAxisStateParams) {
        if (params.position !== null) {
            if (params.position === undefined || !validateNumber(params.position) || params.position < 0) {
                throw new InvalidStateParamsError("Invalid position parameter '" + params.position + "' supplied to NonNegativeAxisState");
            }
        }
        super(params);
    }

    public clone(): NonNegativeAxisState {
        return <NonNegativeAxisState> super.clone();
    }

    public toString(): string {
        return "NonNegativeAxisState";
    }

}

export default class NonNegativeAxisStateMachine extends AxisStateMachine {

    protected current: NonNegativeAxisState;

    public constructor (initialState: NonNegativeAxisState) {
        super(initialState);
    }

    public insertState(state: NonNegativeAxisState): void {
        super.insertState(state);
    }

    public clone(): NonNegativeAxisStateMachine {
        let copy = new NonNegativeAxisStateMachine(this.current);
        this.deepCopyStatesTo(copy);
        return copy;
    }

    public toString(): string {
        return "NonNegativeAxisStateMachine";
    }

}
