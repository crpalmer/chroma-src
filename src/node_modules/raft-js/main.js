"use strict";

const fs = require("fs");
const Raft = require("./lib");

let parser, engine, raft;

// let currentZ;
// let layerHeights1 = [];
// let layerHeights2 = [];

engine = new Raft.Makerbot5thGenEngine({});
parser = new Raft.MakerbotParser(engine);
raft = new Raft.RaftWrapper(parser);

raft.open("test/files/3DBenchy.makerbot");
raft.save("test/files/3DBenchy_copy.makerbot");

// try {
//     console.log("parsing...");
//     parser = Raft.GCodeParser.fromFile("test/files/Polydragon.gcode", new Raft.MakerbotEngine({}));
//     raft = new Raft.Raft(parser);
//     console.log(raft);
//     console.log("running...");
//     // currentZ = raft.parser.engine.position.z;
//     raft.run(function (instruction, state) {
//         if (state.position.z !== currentZ) {
//             if (layerHeights1.indexOf(state.position.z) < 0) {
//                 layerHeights1.push(state.position.z);
//             }
//             // console.log("moving from Z = " + currentZ + " to " + state.position.z);
//             // currentZ = state.position.z;
//         }
//         // if (instruction instanceof Raft.ToolChangeInstruction) {
//         //     console.log(instruction);
//         // }
//     });
//     console.log("rewinding...");
//     raft.rewind();
//     console.log("playing forward...");
//     raft.play(function (instruction, state) {
//         if (layerHeights2.indexOf(state.position.z) < 0) {
//             layerHeights2.push(state.position.z);
//         }
//     });
//     layerHeights1.sort((a, b) => a - b);
//     layerHeights2.sort((a, b) => a - b);
//     let equals = true;
//     for (let i = 0; i < layerHeights1.length; i++) {
//         if (layerHeights1[i] !== layerHeights2[i]) {
//             equals = false;
//             break;
//         }
//     }
//     console.log("layer heights determined and double-checked!");
//     console.log("stepping backward...");
//     raft.stepBackward();
//     console.log("stepping forward...");
//     raft.stepForward();
// } catch (e) {
//     console.log(e.message + ": " + e.instruction);
//     throw e;
// }
